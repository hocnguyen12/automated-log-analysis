[
  {
    "test_name": "Basic Arithmetic Operations",
    "error_message": "Several failures occurred:\n\n1) 0 != 5\n\n2) 0 != 5\n\n3) 2 != 12\n\n4) 8 != 5",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Calculator",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.calculator_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Calculator')]'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.calculator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened calculator application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened calculator application"
        ]
      },
      {
        "keyword": "Test Basic Operation",
        "args": [
          "2",
          "+",
          "3",
          "5"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Calculation",
        "args": [
          "${num1}",
          "${operator}",
          "${num2}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num1}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['2']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 2"
        ]
      },
      {
        "keyword": "Click Operator",
        "args": [
          "${operator}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Create Dictionary",
        "args": [
          "+=add",
          "-=subtract",
          "*=multiply",
          "/=divide"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Creates and returns a dictionary based on the given ``items``.",
        "messages": [
          "${operator_map} = {'+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide'}"
        ]
      },
      {
        "keyword": "Get From Dictionary",
        "args": [
          "${operator_map}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "messages": [
          "${operator_key} = add"
        ]
      },
      {
        "keyword": "Format String",
        "args": [
          "${selectors.calculator.operator_button}",
          "${operator_key}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Formats a ``template`` using the given ``positional`` and ``named`` arguments.",
        "messages": [
          "${button_locator} = css=[data-testid='operator-add']"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${button_locator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='operator-add']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked operator: ${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked operator: +"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['3']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 3"
        ]
      },
      {
        "keyword": "Click Equals",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.equals_button}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='equals-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked equals button"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked equals button"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed calculation: ${num1} ${operator} ${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed calculation: 2 + 3"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Basic Operation",
        "args": [
          "8",
          "-",
          "3",
          "5"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Calculation",
        "args": [
          "${num1}",
          "${operator}",
          "${num2}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num1}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['8']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 8"
        ]
      },
      {
        "keyword": "Click Operator",
        "args": [
          "${operator}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Create Dictionary",
        "args": [
          "+=add",
          "-=subtract",
          "*=multiply",
          "/=divide"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Creates and returns a dictionary based on the given ``items``.",
        "messages": [
          "${operator_map} = {'+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide'}"
        ]
      },
      {
        "keyword": "Get From Dictionary",
        "args": [
          "${operator_map}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "messages": [
          "${operator_key} = subtract"
        ]
      },
      {
        "keyword": "Format String",
        "args": [
          "${selectors.calculator.operator_button}",
          "${operator_key}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Formats a ``template`` using the given ``positional`` and ``named`` arguments.",
        "messages": [
          "${button_locator} = css=[data-testid='operator-subtract']"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${button_locator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='operator-subtract']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked operator: ${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked operator: -"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['3']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 3"
        ]
      },
      {
        "keyword": "Click Equals",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.equals_button}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='equals-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked equals button"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked equals button"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed calculation: ${num1} ${operator} ${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed calculation: 8 - 3"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Basic Operation",
        "args": [
          "4",
          "*",
          "3",
          "12"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Calculation",
        "args": [
          "${num1}",
          "${operator}",
          "${num2}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num1}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['4']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 4"
        ]
      },
      {
        "keyword": "Click Operator",
        "args": [
          "${operator}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Create Dictionary",
        "args": [
          "+=add",
          "-=subtract",
          "*=multiply",
          "/=divide"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Creates and returns a dictionary based on the given ``items``.",
        "messages": [
          "${operator_map} = {'+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide'}"
        ]
      },
      {
        "keyword": "Get From Dictionary",
        "args": [
          "${operator_map}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "messages": [
          "${operator_key} = multiply"
        ]
      },
      {
        "keyword": "Format String",
        "args": [
          "${selectors.calculator.operator_button}",
          "${operator_key}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Formats a ``template`` using the given ``positional`` and ``named`` arguments.",
        "messages": [
          "${button_locator} = css=[data-testid='operator-multiply']"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${button_locator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='operator-multiply']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked operator: ${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked operator: *"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['3']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 3"
        ]
      },
      {
        "keyword": "Click Equals",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.equals_button}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='equals-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked equals button"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked equals button"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed calculation: ${num1} ${operator} ${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed calculation: 4 * 3"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 2"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Basic Operation",
        "args": [
          "15",
          "/",
          "3",
          "5"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Calculation",
        "args": [
          "${num1}",
          "${operator}",
          "${num2}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num1}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['1', '5']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 15"
        ]
      },
      {
        "keyword": "Click Operator",
        "args": [
          "${operator}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Create Dictionary",
        "args": [
          "+=add",
          "-=subtract",
          "*=multiply",
          "/=divide"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Creates and returns a dictionary based on the given ``items``.",
        "messages": [
          "${operator_map} = {'+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide'}"
        ]
      },
      {
        "keyword": "Get From Dictionary",
        "args": [
          "${operator_map}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "messages": [
          "${operator_key} = divide"
        ]
      },
      {
        "keyword": "Format String",
        "args": [
          "${selectors.calculator.operator_button}",
          "${operator_key}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Formats a ``template`` using the given ``positional`` and ``named`` arguments.",
        "messages": [
          "${button_locator} = css=[data-testid='operator-divide']"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${button_locator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='operator-divide']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked operator: ${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked operator: /"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['3']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 3"
        ]
      },
      {
        "keyword": "Click Equals",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.equals_button}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='equals-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked equals button"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked equals button"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed calculation: ${num1} ${operator} ${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed calculation: 15 / 3"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 8"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Clear Function",
    "error_message": "0 != 123",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Calculator",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.calculator_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Calculator')]'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.calculator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened calculator application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened calculator application"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "1"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['1']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 1"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "2"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['2']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 2"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "3"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['3']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 3"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "123"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "0"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Complex Calculations",
    "error_message": "Several failures occurred:\n\n1) 0 != 20\n\n2) 0 != 13\n\n3) 2 != 13\n\n4) 13 != 4",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Calculator",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.calculator_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Calculator')]'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.calculator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened calculator application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened calculator application"
        ]
      },
      {
        "keyword": "Test Complex Calculation",
        "args": [
          "10",
          "+",
          "5",
          "*",
          "2",
          "20"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Complex Calculation",
        "args": [
          "${num1}",
          "${operator1}",
          "${num2}",
          "${operator2}",
          "${num3}",
          "="
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable",
        "args": [
          "0"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the given values which can then be assigned to a variables.",
        "messages": [
          "${step_count} = 0"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed complex calculation: @{steps}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed complex calculation: ['10', '+', '5', '*', '2', '=']"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Complex Calculation",
        "args": [
          "20",
          "/",
          "2",
          "+",
          "3",
          "13"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Complex Calculation",
        "args": [
          "${num1}",
          "${operator1}",
          "${num2}",
          "${operator2}",
          "${num3}",
          "="
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable",
        "args": [
          "0"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the given values which can then be assigned to a variables.",
        "messages": [
          "${step_count} = 0"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed complex calculation: @{steps}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed complex calculation: ['20', '/', '2', '+', '3', '=']"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Complex Calculation",
        "args": [
          "5",
          "*",
          "3",
          "-",
          "2",
          "13"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Complex Calculation",
        "args": [
          "${num1}",
          "${operator1}",
          "${num2}",
          "${operator2}",
          "${num3}",
          "="
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable",
        "args": [
          "0"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the given values which can then be assigned to a variables.",
        "messages": [
          "${step_count} = 0"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed complex calculation: @{steps}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed complex calculation: ['5', '*', '3', '-', '2', '=']"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 2"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Complex Calculation",
        "args": [
          "10",
          "-",
          "2",
          "*",
          "3",
          "4"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Complex Calculation",
        "args": [
          "${num1}",
          "${operator1}",
          "${num2}",
          "${operator2}",
          "${num3}",
          "="
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable",
        "args": [
          "0"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the given values which can then be assigned to a variables.",
        "messages": [
          "${step_count} = 0"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed complex calculation: @{steps}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed complex calculation: ['10', '-', '2', '*', '3', '=']"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 13"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Decimal Operations",
    "error_message": "Several failures occurred:\n\n1) 0 != 3\n\n2) 1 != 5\n\n3) 7 != 3.3",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Calculator",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.calculator_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Calculator')]'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.calculator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened calculator application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened calculator application"
        ]
      },
      {
        "keyword": "Test Decimal Operation",
        "args": [
          "1.5",
          "*",
          "2",
          "3"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Split String",
        "args": [
          "${num1}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the ``string`` using ``separator`` as a delimiter string.",
        "messages": [
          "${num1_parts} = ['1', '5']"
        ]
      },
      {
        "keyword": "Split String",
        "args": [
          "${num2}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the ``string`` using ``separator`` as a delimiter string.",
        "messages": [
          "${num2_parts} = ['2']"
        ]
      },
      {
        "keyword": "Convert To String",
        "args": [
          "${expected}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Converts the given item to a Unicode string.",
        "messages": [
          "${expected_str} = 3"
        ]
      },
      {
        "keyword": "Create List",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns a list containing given items.",
        "messages": [
          "${steps} = []"
        ]
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num1_parts[0]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Evaluate",
        "args": [
          "'.' in '${num1}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Evaluates the given expression in Python and returns the result.",
        "messages": [
          "${has_decimal} = True"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "${num1_parts[1]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num1_parts[1]}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num2_parts[0]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Evaluate",
        "args": [
          "'.' in '${num2}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Evaluates the given expression in Python and returns the result.",
        "messages": [
          "${has_decimal} = False"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "${num2_parts[1]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "="
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "${steps}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "['1', '.', '5', '*', '2', '=']"
        ]
      },
      {
        "keyword": "Perform Complex Calculation",
        "args": [
          "@{steps}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable",
        "args": [
          "0"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the given values which can then be assigned to a variables.",
        "messages": [
          "${step_count} = 0"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed complex calculation: @{steps}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed complex calculation: ['1', '.', '5', '*', '2', '=']"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected_str}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Decimal Operation",
        "args": [
          "3.3",
          "+",
          "1.7",
          "5"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Split String",
        "args": [
          "${num1}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the ``string`` using ``separator`` as a delimiter string.",
        "messages": [
          "${num1_parts} = ['3', '3']"
        ]
      },
      {
        "keyword": "Split String",
        "args": [
          "${num2}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the ``string`` using ``separator`` as a delimiter string.",
        "messages": [
          "${num2_parts} = ['1', '7']"
        ]
      },
      {
        "keyword": "Convert To String",
        "args": [
          "${expected}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Converts the given item to a Unicode string.",
        "messages": [
          "${expected_str} = 5"
        ]
      },
      {
        "keyword": "Create List",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns a list containing given items.",
        "messages": [
          "${steps} = []"
        ]
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num1_parts[0]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Evaluate",
        "args": [
          "'.' in '${num1}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Evaluates the given expression in Python and returns the result.",
        "messages": [
          "${has_decimal} = True"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "${num1_parts[1]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num1_parts[1]}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num2_parts[0]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Evaluate",
        "args": [
          "'.' in '${num2}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Evaluates the given expression in Python and returns the result.",
        "messages": [
          "${has_decimal} = True"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "${num2_parts[1]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num2_parts[1]}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "="
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "${steps}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "['3', '.', '3', '+', '1', '.', '7', '=']"
        ]
      },
      {
        "keyword": "Perform Complex Calculation",
        "args": [
          "@{steps}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable",
        "args": [
          "0"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the given values which can then be assigned to a variables.",
        "messages": [
          "${step_count} = 0"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed complex calculation: @{steps}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed complex calculation: ['3', '.', '3', '+', '1', '.', '7', '=']"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected_str}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 1"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Decimal Operation",
        "args": [
          "5.5",
          "-",
          "2.5",
          "3"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Split String",
        "args": [
          "${num1}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the ``string`` using ``separator`` as a delimiter string.",
        "messages": [
          "${num1_parts} = ['5', '5']"
        ]
      },
      {
        "keyword": "Split String",
        "args": [
          "${num2}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the ``string`` using ``separator`` as a delimiter string.",
        "messages": [
          "${num2_parts} = ['2', '5']"
        ]
      },
      {
        "keyword": "Convert To String",
        "args": [
          "${expected}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Converts the given item to a Unicode string.",
        "messages": [
          "${expected_str} = 3"
        ]
      },
      {
        "keyword": "Create List",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns a list containing given items.",
        "messages": [
          "${steps} = []"
        ]
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num1_parts[0]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Evaluate",
        "args": [
          "'.' in '${num1}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Evaluates the given expression in Python and returns the result.",
        "messages": [
          "${has_decimal} = True"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "${num1_parts[1]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num1_parts[1]}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num2_parts[0]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Evaluate",
        "args": [
          "'.' in '${num2}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Evaluates the given expression in Python and returns the result.",
        "messages": [
          "${has_decimal} = True"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "${num2_parts[1]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num2_parts[1]}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "="
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "${steps}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "['5', '.', '5', '-', '2', '.', '5', '=']"
        ]
      },
      {
        "keyword": "Perform Complex Calculation",
        "args": [
          "@{steps}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable",
        "args": [
          "0"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the given values which can then be assigned to a variables.",
        "messages": [
          "${step_count} = 0"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed complex calculation: @{steps}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed complex calculation: ['5', '.', '5', '-', '2', '.', '5', '=']"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected_str}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 3"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Verified display shows: 3"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Verified calculator state - Display: 3, Equation:"
        ]
      },
      {
        "keyword": "Test Decimal Operation",
        "args": [
          "6.6",
          "/",
          "2",
          "3.3"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Split String",
        "args": [
          "${num1}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the ``string`` using ``separator`` as a delimiter string.",
        "messages": [
          "${num1_parts} = ['6', '6']"
        ]
      },
      {
        "keyword": "Split String",
        "args": [
          "${num2}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the ``string`` using ``separator`` as a delimiter string.",
        "messages": [
          "${num2_parts} = ['2']"
        ]
      },
      {
        "keyword": "Convert To String",
        "args": [
          "${expected}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Converts the given item to a Unicode string.",
        "messages": [
          "${expected_str} = 3.3"
        ]
      },
      {
        "keyword": "Create List",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns a list containing given items.",
        "messages": [
          "${steps} = []"
        ]
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num1_parts[0]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Evaluate",
        "args": [
          "'.' in '${num1}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Evaluates the given expression in Python and returns the result.",
        "messages": [
          "${has_decimal} = True"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "${num1_parts[1]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num1_parts[1]}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num2_parts[0]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Evaluate",
        "args": [
          "'.' in '${num2}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Evaluates the given expression in Python and returns the result.",
        "messages": [
          "${has_decimal} = False"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "${num2_parts[1]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "="
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "${steps}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "['6', '.', '6', '/', '2', '=']"
        ]
      },
      {
        "keyword": "Perform Complex Calculation",
        "args": [
          "@{steps}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable",
        "args": [
          "0"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the given values which can then be assigned to a variables.",
        "messages": [
          "${step_count} = 0"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed complex calculation: @{steps}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed complex calculation: ['6', '.', '6', '/', '2', '=']"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected_str}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 7"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Error Handling",
    "error_message": "Several failures occurred:\n\n1) 0 != Infinity\n\n2) 0 != NaN",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Calculator",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.calculator_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Calculator')]'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.calculator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened calculator application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened calculator application"
        ]
      },
      {
        "keyword": "Test Error Case",
        "args": [
          "1",
          "/",
          "0",
          "Infinity"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Calculation",
        "args": [
          "${num1}",
          "${operator}",
          "${num2}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num1}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['1']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 1"
        ]
      },
      {
        "keyword": "Click Operator",
        "args": [
          "${operator}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Create Dictionary",
        "args": [
          "+=add",
          "-=subtract",
          "*=multiply",
          "/=divide"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Creates and returns a dictionary based on the given ``items``.",
        "messages": [
          "${operator_map} = {'+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide'}"
        ]
      },
      {
        "keyword": "Get From Dictionary",
        "args": [
          "${operator_map}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "messages": [
          "${operator_key} = divide"
        ]
      },
      {
        "keyword": "Format String",
        "args": [
          "${selectors.calculator.operator_button}",
          "${operator_key}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Formats a ``template`` using the given ``positional`` and ``named`` arguments.",
        "messages": [
          "${button_locator} = css=[data-testid='operator-divide']"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${button_locator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='operator-divide']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked operator: ${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked operator: /"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['0']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 0"
        ]
      },
      {
        "keyword": "Click Equals",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.equals_button}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='equals-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked equals button"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked equals button"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed calculation: ${num1} ${operator} ${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed calculation: 1 / 0"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Error Case",
        "args": [
          "0",
          "/",
          "0",
          "NaN"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Calculation",
        "args": [
          "${num1}",
          "${operator}",
          "${num2}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num1}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['0']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 0"
        ]
      },
      {
        "keyword": "Click Operator",
        "args": [
          "${operator}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Create Dictionary",
        "args": [
          "+=add",
          "-=subtract",
          "*=multiply",
          "/=divide"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Creates and returns a dictionary based on the given ``items``.",
        "messages": [
          "${operator_map} = {'+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide'}"
        ]
      },
      {
        "keyword": "Get From Dictionary",
        "args": [
          "${operator_map}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "messages": [
          "${operator_key} = divide"
        ]
      },
      {
        "keyword": "Format String",
        "args": [
          "${selectors.calculator.operator_button}",
          "${operator_key}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Formats a ``template`` using the given ``positional`` and ``named`` arguments.",
        "messages": [
          "${button_locator} = css=[data-testid='operator-divide']"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${button_locator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='operator-divide']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked operator: ${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked operator: /"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['0']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 0"
        ]
      },
      {
        "keyword": "Click Equals",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.equals_button}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='equals-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked equals button"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked equals button"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed calculation: ${num1} ${operator} ${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed calculation: 0 / 0"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Equation Display",
    "error_message": "0 != 3",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Calculator",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.calculator_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Calculator')]'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.calculator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened calculator application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened calculator application"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "1"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['1']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 1"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "2"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['2']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 2"
        ]
      },
      {
        "keyword": "Click Operator",
        "args": [
          "+"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Create Dictionary",
        "args": [
          "+=add",
          "-=subtract",
          "*=multiply",
          "/=divide"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Creates and returns a dictionary based on the given ``items``.",
        "messages": [
          "${operator_map} = {'+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide'}"
        ]
      },
      {
        "keyword": "Get From Dictionary",
        "args": [
          "${operator_map}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "messages": [
          "${operator_key} = add"
        ]
      },
      {
        "keyword": "Format String",
        "args": [
          "${selectors.calculator.operator_button}",
          "${operator_key}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Formats a ``template`` using the given ``positional`` and ``named`` arguments.",
        "messages": [
          "${button_locator} = css=[data-testid='operator-add']"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${button_locator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='operator-add']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked operator: ${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked operator: +"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "3"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['3']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 3"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "3",
          "12+"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Multiple Operations",
    "error_message": "0 != 10",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Calculator",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.calculator_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Calculator')]'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.calculator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened calculator application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened calculator application"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "1"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['1']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 1"
        ]
      },
      {
        "keyword": "Click Operator",
        "args": [
          "+"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Create Dictionary",
        "args": [
          "+=add",
          "-=subtract",
          "*=multiply",
          "/=divide"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Creates and returns a dictionary based on the given ``items``.",
        "messages": [
          "${operator_map} = {'+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide'}"
        ]
      },
      {
        "keyword": "Get From Dictionary",
        "args": [
          "${operator_map}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "messages": [
          "${operator_key} = add"
        ]
      },
      {
        "keyword": "Format String",
        "args": [
          "${selectors.calculator.operator_button}",
          "${operator_key}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Formats a ``template`` using the given ``positional`` and ``named`` arguments.",
        "messages": [
          "${button_locator} = css=[data-testid='operator-add']"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${button_locator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='operator-add']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked operator: ${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked operator: +"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "2"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['2']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 2"
        ]
      },
      {
        "keyword": "Click Operator",
        "args": [
          "+"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Create Dictionary",
        "args": [
          "+=add",
          "-=subtract",
          "*=multiply",
          "/=divide"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Creates and returns a dictionary based on the given ``items``.",
        "messages": [
          "${operator_map} = {'+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide'}"
        ]
      },
      {
        "keyword": "Get From Dictionary",
        "args": [
          "${operator_map}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "messages": [
          "${operator_key} = add"
        ]
      },
      {
        "keyword": "Format String",
        "args": [
          "${selectors.calculator.operator_button}",
          "${operator_key}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Formats a ``template`` using the given ``positional`` and ``named`` arguments.",
        "messages": [
          "${button_locator} = css=[data-testid='operator-add']"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${button_locator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='operator-add']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked operator: ${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked operator: +"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "3"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['3']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 3"
        ]
      },
      {
        "keyword": "Click Operator",
        "args": [
          "+"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Create Dictionary",
        "args": [
          "+=add",
          "-=subtract",
          "*=multiply",
          "/=divide"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Creates and returns a dictionary based on the given ``items``.",
        "messages": [
          "${operator_map} = {'+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide'}"
        ]
      },
      {
        "keyword": "Get From Dictionary",
        "args": [
          "${operator_map}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "messages": [
          "${operator_key} = add"
        ]
      },
      {
        "keyword": "Format String",
        "args": [
          "${selectors.calculator.operator_button}",
          "${operator_key}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Formats a ``template`` using the given ``positional`` and ``named`` arguments.",
        "messages": [
          "${button_locator} = css=[data-testid='operator-add']"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${button_locator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='operator-add']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked operator: ${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked operator: +"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "4"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['4']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 4"
        ]
      },
      {
        "keyword": "Click Equals",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.equals_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='equals-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked equals button"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked equals button"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "10"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Clear During Calculation",
    "error_message": "0 != 12",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Calculator",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.calculator_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Calculator')]'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.calculator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened calculator application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened calculator application"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "1"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['1']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 1"
        ]
      },
      {
        "keyword": "Click Operator",
        "args": [
          "+"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Create Dictionary",
        "args": [
          "+=add",
          "-=subtract",
          "*=multiply",
          "/=divide"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Creates and returns a dictionary based on the given ``items``.",
        "messages": [
          "${operator_map} = {'+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide'}"
        ]
      },
      {
        "keyword": "Get From Dictionary",
        "args": [
          "${operator_map}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "messages": [
          "${operator_key} = add"
        ]
      },
      {
        "keyword": "Format String",
        "args": [
          "${selectors.calculator.operator_button}",
          "${operator_key}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Formats a ``template`` using the given ``positional`` and ``named`` arguments.",
        "messages": [
          "${button_locator} = css=[data-testid='operator-add']"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${button_locator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='operator-add']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked operator: ${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked operator: +"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "2"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['2']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 2"
        ]
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "0"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Verified display shows: 0"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Verified calculator state - Display: 0, Equation:"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "3"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['3']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 3"
        ]
      },
      {
        "keyword": "Click Operator",
        "args": [
          "*"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Create Dictionary",
        "args": [
          "+=add",
          "-=subtract",
          "*=multiply",
          "/=divide"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Creates and returns a dictionary based on the given ``items``.",
        "messages": [
          "${operator_map} = {'+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide'}"
        ]
      },
      {
        "keyword": "Get From Dictionary",
        "args": [
          "${operator_map}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "messages": [
          "${operator_key} = multiply"
        ]
      },
      {
        "keyword": "Format String",
        "args": [
          "${selectors.calculator.operator_button}",
          "${operator_key}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Formats a ``template`` using the given ``positional`` and ``named`` arguments.",
        "messages": [
          "${button_locator} = css=[data-testid='operator-multiply']"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${button_locator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='operator-multiply']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked operator: ${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked operator: *"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "4"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['4']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 4"
        ]
      },
      {
        "keyword": "Click Equals",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.equals_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='equals-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked equals button"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked equals button"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "12"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Multiple Decimal Points Error",
    "error_message": "0 != Error",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Calculator",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.calculator_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Calculator')]'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.calculator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened calculator application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened calculator application"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "1"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['1']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 1"
        ]
      },
      {
        "keyword": "Click Decimal",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.decimal_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='number-decimal']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked decimal point"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked decimal point"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "5"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['5']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 5"
        ]
      },
      {
        "keyword": "Click Decimal",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.decimal_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='number-decimal']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked decimal point"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked decimal point"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "2"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['2']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 2"
        ]
      },
      {
        "keyword": "Click Equals",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.equals_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='equals-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked equals button"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked equals button"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "Error"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Decimal",
        "args": [],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Number",
        "args": [
          "3"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Decimal",
        "args": [],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Number",
        "args": [
          "4"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Equals",
        "args": [],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "Error"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Large Numbers",
    "error_message": "Several failures occurred:\n\n1) 0 != 1000000\n\n2) 9 != 2000000\n\n3) 0 != 1000000\n\n4) 2 != 1",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Calculator",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.calculator_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Calculator')]'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.calculator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened calculator application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened calculator application"
        ]
      },
      {
        "keyword": "Test Basic Operation",
        "args": [
          "999999",
          "+",
          "1",
          "1000000"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Calculation",
        "args": [
          "${num1}",
          "${operator}",
          "${num2}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num1}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['9', '9', '9', '9', '9', '9']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 999999"
        ]
      },
      {
        "keyword": "Click Operator",
        "args": [
          "${operator}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Create Dictionary",
        "args": [
          "+=add",
          "-=subtract",
          "*=multiply",
          "/=divide"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Creates and returns a dictionary based on the given ``items``.",
        "messages": [
          "${operator_map} = {'+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide'}"
        ]
      },
      {
        "keyword": "Get From Dictionary",
        "args": [
          "${operator_map}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "messages": [
          "${operator_key} = add"
        ]
      },
      {
        "keyword": "Format String",
        "args": [
          "${selectors.calculator.operator_button}",
          "${operator_key}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Formats a ``template`` using the given ``positional`` and ``named`` arguments.",
        "messages": [
          "${button_locator} = css=[data-testid='operator-add']"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${button_locator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='operator-add']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked operator: ${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked operator: +"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['1']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 1"
        ]
      },
      {
        "keyword": "Click Equals",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.equals_button}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='equals-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked equals button"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked equals button"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed calculation: ${num1} ${operator} ${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed calculation: 999999 + 1"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Basic Operation",
        "args": [
          "1000000",
          "*",
          "2",
          "2000000"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Calculation",
        "args": [
          "${num1}",
          "${operator}",
          "${num2}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num1}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['1', '0', '0', '0', '0', '0', '0']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 1000000"
        ]
      },
      {
        "keyword": "Click Operator",
        "args": [
          "${operator}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Create Dictionary",
        "args": [
          "+=add",
          "-=subtract",
          "*=multiply",
          "/=divide"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Creates and returns a dictionary based on the given ``items``.",
        "messages": [
          "${operator_map} = {'+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide'}"
        ]
      },
      {
        "keyword": "Get From Dictionary",
        "args": [
          "${operator_map}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "messages": [
          "${operator_key} = multiply"
        ]
      },
      {
        "keyword": "Format String",
        "args": [
          "${selectors.calculator.operator_button}",
          "${operator_key}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Formats a ``template`` using the given ``positional`` and ``named`` arguments.",
        "messages": [
          "${button_locator} = css=[data-testid='operator-multiply']"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${button_locator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='operator-multiply']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked operator: ${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked operator: *"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['2']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 2"
        ]
      },
      {
        "keyword": "Click Equals",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.equals_button}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='equals-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked equals button"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked equals button"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed calculation: ${num1} ${operator} ${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed calculation: 1000000 * 2"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 9"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Basic Operation",
        "args": [
          "2000000",
          "/",
          "2",
          "1000000"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Calculation",
        "args": [
          "${num1}",
          "${operator}",
          "${num2}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num1}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['2', '0', '0', '0', '0', '0', '0']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 2000000"
        ]
      },
      {
        "keyword": "Click Operator",
        "args": [
          "${operator}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Create Dictionary",
        "args": [
          "+=add",
          "-=subtract",
          "*=multiply",
          "/=divide"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Creates and returns a dictionary based on the given ``items``.",
        "messages": [
          "${operator_map} = {'+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide'}"
        ]
      },
      {
        "keyword": "Get From Dictionary",
        "args": [
          "${operator_map}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "messages": [
          "${operator_key} = divide"
        ]
      },
      {
        "keyword": "Format String",
        "args": [
          "${selectors.calculator.operator_button}",
          "${operator_key}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Formats a ``template`` using the given ``positional`` and ``named`` arguments.",
        "messages": [
          "${button_locator} = css=[data-testid='operator-divide']"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${button_locator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='operator-divide']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked operator: ${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked operator: /"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['2']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 2"
        ]
      },
      {
        "keyword": "Click Equals",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.equals_button}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='equals-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked equals button"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked equals button"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed calculation: ${num1} ${operator} ${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed calculation: 2000000 / 2"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Basic Operation",
        "args": [
          "999999",
          "-",
          "999998",
          "1"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Calculation",
        "args": [
          "${num1}",
          "${operator}",
          "${num2}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num1}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['9', '9', '9', '9', '9', '9']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 999999"
        ]
      },
      {
        "keyword": "Click Operator",
        "args": [
          "${operator}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Create Dictionary",
        "args": [
          "+=add",
          "-=subtract",
          "*=multiply",
          "/=divide"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Creates and returns a dictionary based on the given ``items``.",
        "messages": [
          "${operator_map} = {'+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide'}"
        ]
      },
      {
        "keyword": "Get From Dictionary",
        "args": [
          "${operator_map}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "messages": [
          "${operator_key} = subtract"
        ]
      },
      {
        "keyword": "Format String",
        "args": [
          "${selectors.calculator.operator_button}",
          "${operator_key}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Formats a ``template`` using the given ``positional`` and ``named`` arguments.",
        "messages": [
          "${button_locator} = css=[data-testid='operator-subtract']"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${button_locator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='operator-subtract']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked operator: ${operator}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked operator: -"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['9', '9', '9', '9', '9', '8']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 999998"
        ]
      },
      {
        "keyword": "Click Equals",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.equals_button}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='equals-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked equals button"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked equals button"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed calculation: ${num1} ${operator} ${num2}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed calculation: 999999 - 999998"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 2"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Negative Numbers",
    "error_message": "0 != -3",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Calculator",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.calculator_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Calculator')]'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.calculator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened calculator application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened calculator application"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "5"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['5']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 5"
        ]
      },
      {
        "keyword": "Click Operator",
        "args": [
          "-"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Create Dictionary",
        "args": [
          "+=add",
          "-=subtract",
          "*=multiply",
          "/=divide"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Creates and returns a dictionary based on the given ``items``.",
        "messages": [
          "${operator_map} = {'+': 'add', '-': 'subtract', '*': 'multiply', '/': 'divide'}"
        ]
      },
      {
        "keyword": "Get From Dictionary",
        "args": [
          "${operator_map}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "messages": [
          "${operator_key} = subtract"
        ]
      },
      {
        "keyword": "Format String",
        "args": [
          "${selectors.calculator.operator_button}",
          "${operator_key}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Formats a ``template`` using the given ``positional`` and ``named`` arguments.",
        "messages": [
          "${button_locator} = css=[data-testid='operator-subtract']"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${button_locator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='operator-subtract']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked operator: ${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked operator: -"
        ]
      },
      {
        "keyword": "Click Number",
        "args": [
          "8"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Split String To Characters",
        "args": [
          "${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the given ``string`` to characters.",
        "messages": [
          "${digits} = ['8']"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked number: ${number}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked number: 8"
        ]
      },
      {
        "keyword": "Click Equals",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.equals_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='equals-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked equals button"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked equals button"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "-3"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Number",
        "args": [
          "1"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Operator",
        "args": [
          "-"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Number",
        "args": [
          "1"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Operator",
        "args": [
          "-"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Number",
        "args": [
          "1"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Equals",
        "args": [],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "-1"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Precision Edge Cases",
    "error_message": "Several failures occurred:\n\n1) 0 != 0.30000000000000004\n\n2) 2 != 1\n\n3) 0 != 1\n\n4) . != 1",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Calculator",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.calculator_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Calculator')]'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.calculator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened calculator application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened calculator application"
        ]
      },
      {
        "keyword": "Test Decimal Operation",
        "args": [
          "0.1",
          "+",
          "0.2",
          "0.30000000000000004"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Split String",
        "args": [
          "${num1}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the ``string`` using ``separator`` as a delimiter string.",
        "messages": [
          "${num1_parts} = ['0', '1']"
        ]
      },
      {
        "keyword": "Split String",
        "args": [
          "${num2}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the ``string`` using ``separator`` as a delimiter string.",
        "messages": [
          "${num2_parts} = ['0', '2']"
        ]
      },
      {
        "keyword": "Convert To String",
        "args": [
          "${expected}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Converts the given item to a Unicode string.",
        "messages": [
          "${expected_str} = 0.30000000000000004"
        ]
      },
      {
        "keyword": "Create List",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns a list containing given items.",
        "messages": [
          "${steps} = []"
        ]
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num1_parts[0]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Evaluate",
        "args": [
          "'.' in '${num1}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Evaluates the given expression in Python and returns the result.",
        "messages": [
          "${has_decimal} = True"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "${num1_parts[1]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num1_parts[1]}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num2_parts[0]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Evaluate",
        "args": [
          "'.' in '${num2}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Evaluates the given expression in Python and returns the result.",
        "messages": [
          "${has_decimal} = True"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "${num2_parts[1]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num2_parts[1]}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "="
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "${steps}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "['0', '.', '1', '+', '0', '.', '2', '=']"
        ]
      },
      {
        "keyword": "Perform Complex Calculation",
        "args": [
          "@{steps}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable",
        "args": [
          "0"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the given values which can then be assigned to a variables.",
        "messages": [
          "${step_count} = 0"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed complex calculation: @{steps}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed complex calculation: ['0', '.', '1', '+', '0', '.', '2', '=']"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected_str}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Decimal Operation",
        "args": [
          "0.0001",
          "*",
          "10000",
          "1"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Split String",
        "args": [
          "${num1}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the ``string`` using ``separator`` as a delimiter string.",
        "messages": [
          "${num1_parts} = ['0', '0001']"
        ]
      },
      {
        "keyword": "Split String",
        "args": [
          "${num2}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the ``string`` using ``separator`` as a delimiter string.",
        "messages": [
          "${num2_parts} = ['10000']"
        ]
      },
      {
        "keyword": "Convert To String",
        "args": [
          "${expected}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Converts the given item to a Unicode string.",
        "messages": [
          "${expected_str} = 1"
        ]
      },
      {
        "keyword": "Create List",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns a list containing given items.",
        "messages": [
          "${steps} = []"
        ]
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num1_parts[0]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Evaluate",
        "args": [
          "'.' in '${num1}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Evaluates the given expression in Python and returns the result.",
        "messages": [
          "${has_decimal} = True"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "${num1_parts[1]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num1_parts[1]}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num2_parts[0]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Evaluate",
        "args": [
          "'.' in '${num2}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Evaluates the given expression in Python and returns the result.",
        "messages": [
          "${has_decimal} = False"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "${num2_parts[1]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "="
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "${steps}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "['0', '.', '0001', '*', '10000', '=']"
        ]
      },
      {
        "keyword": "Perform Complex Calculation",
        "args": [
          "@{steps}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable",
        "args": [
          "0"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the given values which can then be assigned to a variables.",
        "messages": [
          "${step_count} = 0"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed complex calculation: @{steps}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed complex calculation: ['0', '.', '0001', '*', '10000', '=']"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected_str}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 2"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Decimal Operation",
        "args": [
          "0.000001",
          "*",
          "1000000",
          "1"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Split String",
        "args": [
          "${num1}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the ``string`` using ``separator`` as a delimiter string.",
        "messages": [
          "${num1_parts} = ['0', '000001']"
        ]
      },
      {
        "keyword": "Split String",
        "args": [
          "${num2}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the ``string`` using ``separator`` as a delimiter string.",
        "messages": [
          "${num2_parts} = ['1000000']"
        ]
      },
      {
        "keyword": "Convert To String",
        "args": [
          "${expected}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Converts the given item to a Unicode string.",
        "messages": [
          "${expected_str} = 1"
        ]
      },
      {
        "keyword": "Create List",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns a list containing given items.",
        "messages": [
          "${steps} = []"
        ]
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num1_parts[0]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Evaluate",
        "args": [
          "'.' in '${num1}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Evaluates the given expression in Python and returns the result.",
        "messages": [
          "${has_decimal} = True"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "${num1_parts[1]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num1_parts[1]}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num2_parts[0]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Evaluate",
        "args": [
          "'.' in '${num2}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Evaluates the given expression in Python and returns the result.",
        "messages": [
          "${has_decimal} = False"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "${num2_parts[1]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "="
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "${steps}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "['0', '.', '000001', '*', '1000000', '=']"
        ]
      },
      {
        "keyword": "Perform Complex Calculation",
        "args": [
          "@{steps}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable",
        "args": [
          "0"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the given values which can then be assigned to a variables.",
        "messages": [
          "${step_count} = 0"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed complex calculation: @{steps}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed complex calculation: ['0', '.', '000001', '*', '1000000', '=']"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected_str}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Decimal Operation",
        "args": [
          "0.0000001",
          "*",
          "10000000",
          "1"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Split String",
        "args": [
          "${num1}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the ``string`` using ``separator`` as a delimiter string.",
        "messages": [
          "${num1_parts} = ['0', '0000001']"
        ]
      },
      {
        "keyword": "Split String",
        "args": [
          "${num2}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Splits the ``string`` using ``separator`` as a delimiter string.",
        "messages": [
          "${num2_parts} = ['10000000']"
        ]
      },
      {
        "keyword": "Convert To String",
        "args": [
          "${expected}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Converts the given item to a Unicode string.",
        "messages": [
          "${expected_str} = 1"
        ]
      },
      {
        "keyword": "Create List",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns a list containing given items.",
        "messages": [
          "${steps} = []"
        ]
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num1_parts[0]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Evaluate",
        "args": [
          "'.' in '${num1}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Evaluates the given expression in Python and returns the result.",
        "messages": [
          "${has_decimal} = True"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "${num1_parts[1]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num1_parts[1]}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${operator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "${num2_parts[0]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Evaluate",
        "args": [
          "'.' in '${num2}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Evaluates the given expression in Python and returns the result.",
        "messages": [
          "${has_decimal} = False"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "."
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_decimal}",
          "Append To List",
          "${steps}",
          "${num2_parts[1]}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Append To List",
        "args": [
          "${steps}",
          "="
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Adds ``values`` to the end of ``list``.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "${steps}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "['0', '.', '0000001', '*', '10000000', '=']"
        ]
      },
      {
        "keyword": "Perform Complex Calculation",
        "args": [
          "@{steps}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable",
        "args": [
          "0"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the given values which can then be assigned to a variables.",
        "messages": [
          "${step_count} = 0"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed complex calculation: @{steps}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed complex calculation: ['0', '.', '0000001', '*', '10000000', '=']"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected_str}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = ."
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Operator Precedence",
    "error_message": "Several failures occurred:\n\n1) 0 != 14\n\n2) 0 != 4\n\n3) 4 != 13\n\n4) 0 != 13",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Calculator",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.calculator_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Calculator')]'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.calculator}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened calculator application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened calculator application"
        ]
      },
      {
        "keyword": "Test Complex Calculation",
        "args": [
          "2",
          "+",
          "3",
          "*",
          "4",
          "14"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Complex Calculation",
        "args": [
          "${num1}",
          "${operator1}",
          "${num2}",
          "${operator2}",
          "${num3}",
          "="
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable",
        "args": [
          "0"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the given values which can then be assigned to a variables.",
        "messages": [
          "${step_count} = 0"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed complex calculation: @{steps}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed complex calculation: ['2', '+', '3', '*', '4', '=']"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Complex Calculation",
        "args": [
          "10",
          "-",
          "2",
          "*",
          "3",
          "4"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Complex Calculation",
        "args": [
          "${num1}",
          "${operator1}",
          "${num2}",
          "${operator2}",
          "${num3}",
          "="
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable",
        "args": [
          "0"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the given values which can then be assigned to a variables.",
        "messages": [
          "${step_count} = 0"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed complex calculation: @{steps}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed complex calculation: ['10', '-', '2', '*', '3', '=']"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Complex Calculation",
        "args": [
          "20",
          "/",
          "2",
          "+",
          "3",
          "13"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Complex Calculation",
        "args": [
          "${num1}",
          "${operator1}",
          "${num2}",
          "${operator2}",
          "${num3}",
          "="
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable",
        "args": [
          "0"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the given values which can then be assigned to a variables.",
        "messages": [
          "${step_count} = 0"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed complex calculation: @{steps}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed complex calculation: ['20', '/', '2', '+', '3', '=']"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 4"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Test Complex Calculation",
        "args": [
          "5",
          "*",
          "3",
          "-",
          "2",
          "13"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Clear",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.calculator.clear_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='clear-button']'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Clicked clear button"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Clicked clear button"
        ]
      },
      {
        "keyword": "Perform Complex Calculation",
        "args": [
          "${num1}",
          "${operator1}",
          "${num2}",
          "${operator2}",
          "${num3}",
          "="
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable",
        "args": [
          "0"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the given values which can then be assigned to a variables.",
        "messages": [
          "${step_count} = 0"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Performed complex calculation: @{steps}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Performed complex calculation: ['5', '*', '3', '-', '2', '=']"
        ]
      },
      {
        "keyword": "Verify Calculator State",
        "args": [
          "${expected}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Display Shows",
        "args": [
          "${expected_display}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "${selectors.calculator.display}"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${actual_value} = 0"
        ]
      },
      {
        "keyword": "Should Be Equal As Strings",
        "args": [
          "${actual_value}",
          "${expected_value}"
        ],
        "status": "FAIL",
        "depth": 3,
        "doc": "Fails if objects are unequal after converting them to strings.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified display shows: ${expected_value}"
        ],
        "status": "NOT RUN",
        "depth": 3,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${expected_equation}' != '${EMPTY}'",
          "Verify Equation Shows",
          "${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Verified calculator state - Display: ${expected_display}, Equation: ${expected_equation}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Basic Note Editing",
    "error_message": "Element with locator 'css=[data-testid='update-note-button']' not found.",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Notes",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.notes_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Notes')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Add Note",
        "args": [
          "${test_data.initial_note.title}",
          "${test_data.initial_note.content}"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding note with title: ${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding note with title: Test Note"
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Test Note' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'This is a test note' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.add_note_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='add-note-button']'."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${title_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${content_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Be True",
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${should_wait} = True"
        ]
      },
      {
        "keyword": "Should Be True",
        "args": [
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if the given condition is not true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${should_wait}",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Edit Note",
        "args": [
          "${test_data.initial_note.title}",
          "${test_data.updated_note.title}",
          "${test_data.updated_note.content}"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Editing note from '${old_title}' to '${new_title}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Editing note from 'Test Note' to 'Updated Test Note'"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "xpath=//h3[contains(text(), '${old_title}')]/ancestor::div[contains(@data-testid, 'note-')]//button[contains(@data-testid, 'edit-note-button-')]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//h3[contains(text(), 'Test Note')]/ancestor::div[contains(@data-testid, 'note-')]//button[contains(@data-testid, 'edit-note-button-')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${new_title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Updated Test Note' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${new_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'This is an updated test note' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.update_note_button}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='update-note-button']'.",
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-1.png\"><img src=\"selenium-screenshot-1.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${new_title}' != '${EMPTY}'",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${new_title}')]",
          "timeout=10s"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Complete Note Lifecycle",
    "error_message": "Element with locator 'css=[data-testid='update-note-button']' not found.",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Notes",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.notes_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Notes')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Add Note",
        "args": [
          "${test_data.initial_note.title}",
          "${test_data.initial_note.content}"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding note with title: ${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding note with title: Test Note"
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Test Note' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'This is a test note' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.add_note_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='add-note-button']'."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${title_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${content_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Be True",
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${should_wait} = True"
        ]
      },
      {
        "keyword": "Should Be True",
        "args": [
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if the given condition is not true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${should_wait}",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Edit Note",
        "args": [
          "${test_data.initial_note.title}",
          "${test_data.updated_note.title}",
          "${test_data.updated_note.content}"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Editing note from '${old_title}' to '${new_title}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Editing note from 'Test Note' to 'Updated Test Note'"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "xpath=//h3[contains(text(), '${old_title}')]/ancestor::div[contains(@data-testid, 'note-')]//button[contains(@data-testid, 'edit-note-button-')]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//h3[contains(text(), 'Test Note')]/ancestor::div[contains(@data-testid, 'note-')]//button[contains(@data-testid, 'edit-note-button-')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${new_title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Updated Test Note' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${new_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'This is an updated test note' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.update_note_button}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='update-note-button']'.",
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-2.png\"><img src=\"selenium-screenshot-2.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${new_title}' != '${EMPTY}'",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${new_title}')]",
          "timeout=10s"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Delete Note",
        "args": [
          "${test_data.updated_note.title}"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Multiple Notes Management",
    "error_message": "Element with locator 'css=[data-testid='update-note-button']' not found.",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Notes",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.notes_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Notes')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Add Note",
        "args": [
          "First Note",
          "First Content"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding note with title: ${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding note with title: First Note"
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'First Note' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'First Content' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.add_note_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='add-note-button']'."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${title_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${content_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Be True",
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${should_wait} = True"
        ]
      },
      {
        "keyword": "Should Be True",
        "args": [
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if the given condition is not true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${should_wait}",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Add Note",
        "args": [
          "Second Note",
          "Second Content"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding note with title: ${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding note with title: Second Note"
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Second Note' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Second Content' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.add_note_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='add-note-button']'."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${title_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${content_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Be True",
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${should_wait} = True"
        ]
      },
      {
        "keyword": "Should Be True",
        "args": [
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if the given condition is not true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${should_wait}",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Edit Note",
        "args": [
          "First Note",
          "Updated First Note",
          "Updated First Content"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Editing note from '${old_title}' to '${new_title}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Editing note from 'First Note' to 'Updated First Note'"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "xpath=//h3[contains(text(), '${old_title}')]/ancestor::div[contains(@data-testid, 'note-')]//button[contains(@data-testid, 'edit-note-button-')]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//h3[contains(text(), 'First Note')]/ancestor::div[contains(@data-testid, 'note-')]//button[contains(@data-testid, 'edit-note-button-')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${new_title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Updated First Note' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${new_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Updated First Content' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.update_note_button}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='update-note-button']'.",
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-3.png\"><img src=\"selenium-screenshot-3.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${new_title}' != '${EMPTY}'",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${new_title}')]",
          "timeout=10s"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Delete Note",
        "args": [
          "Second Note"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Create And Save Note",
    "error_message": "Element with locator 'xpath=//h3[contains(text(), 'Test Note')]/ancestor::div[contains(@data-testid, 'note-')]' not found.",
    "doc": "Test creating and saving a new note",
    "steps": [
      {
        "keyword": "Open Notes App",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.notes_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Notes')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Clear All Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Get Note Count",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Get Element Count",
        "args": [
          "xpath=//div[contains(@data-testid, 'note-') and .//h3]"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the number of elements matching ``locator``.",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${count} > 0",
          "Delete All Notes",
          "${count}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Add Note",
        "args": [
          "Test Note",
          "This is a test note"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding note with title: ${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding note with title: Test Note"
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Test Note' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'This is a test note' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.add_note_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='add-note-button']'."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${title_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${content_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Be True",
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${should_wait} = True"
        ]
      },
      {
        "keyword": "Should Be True",
        "args": [
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if the given condition is not true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${should_wait}",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Verify Note Exists",
        "args": [
          "Test Note",
          "This is a test note"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable If",
        "args": [
          "'${title}' == '${EMPTY}'",
          "xpath=//div[contains(@data-testid, 'note-')][.//p[contains(@data-testid, 'note-content-')]]",
          "xpath=//h3[contains(text(), '${title}')]/ancestor::div[contains(@data-testid, 'note-')]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Sets variable based on the given condition.",
        "messages": [
          "${note_selector} = xpath=//h3[contains(text(), 'Test Note')]/ancestor::div[contains(@data-testid, 'note-')]"
        ]
      },
      {
        "keyword": "Element Should Be Visible",
        "args": [
          "${note_selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Verifies that the element identified by ``locator`` is visible.",
        "messages": [
          "Element 'xpath=//h3[contains(text(), 'Test Note')]/ancestor::div[contains(@data-testid, 'note-')]' is displayed."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Be Empty",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Be Empty",
        "args": [
          "${content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Verifies that the given item is not empty.",
        "messages": [
          "Length is 19."
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_content}",
          "Element Should Be Visible",
          "${note_selector}//p[contains(@data-testid, 'note-content-')]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Element Should Be Visible",
        "args": [
          "${note_selector}//p[contains(@data-testid, 'note-content-')]"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Verifies that the element identified by ``locator`` is visible.",
        "messages": [
          "Element 'xpath=//h3[contains(text(), 'Test Note')]/ancestor::div[contains(@data-testid, 'note-')]//p[contains(@data-testid, 'note-content-')]' is displayed."
        ]
      },
      {
        "keyword": "Verify Note Date Format",
        "args": [
          "Test Note"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Get Text",
        "args": [
          "xpath=//h3[contains(text(), '${title}')]/ancestor::div[contains(@data-testid, 'note-')]//p[contains(@data-testid, 'note-date-')]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns the text value of the element identified by ``locator``.",
        "messages": [
          "${date_text} = 5/5/2025, 11:25:28 AM"
        ]
      },
      {
        "keyword": "Should Match Regexp",
        "args": [
          "${date_text}",
          "\\\\d{1,2}/\\\\d{1,2}/\\\\d{4}, \\\\d{1,2}:\\\\d{2}:\\\\d{2} [AP]M"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Fails if ``string`` does not match ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Verify Note Persistence",
        "args": [
          "Test Note",
          "This is a test note"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Reload Notes App",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Reload Page",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "Simulates user reloading page.",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.notes_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Notes')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Sleep",
        "args": [
          "1s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Pauses the test executed for the given time.",
        "messages": [
          "Slept 1 second."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Verify Note Exists",
        "args": [
          "${title}",
          "${content}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable If",
        "args": [
          "'${title}' == '${EMPTY}'",
          "xpath=//div[contains(@data-testid, 'note-')][.//p[contains(@data-testid, 'note-content-')]]",
          "xpath=//h3[contains(text(), '${title}')]/ancestor::div[contains(@data-testid, 'note-')]"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Sets variable based on the given condition.",
        "messages": [
          "${note_selector} = xpath=//h3[contains(text(), 'Test Note')]/ancestor::div[contains(@data-testid, 'note-')]"
        ]
      },
      {
        "keyword": "Element Should Be Visible",
        "args": [
          "${note_selector}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "Verifies that the element identified by ``locator`` is visible.",
        "messages": [
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-4.png\"><img src=\"selenium-screenshot-4.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Be Empty",
          "${content}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_content}",
          "Element Should Be Visible",
          "${note_selector}//p[contains(@data-testid, 'note-content-')]"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Edit Existing Note",
    "error_message": "Element with locator 'css=[data-testid='update-note-button']' not found.",
    "doc": "Test editing an existing note",
    "steps": [
      {
        "keyword": "Open Notes App",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.notes_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Notes')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Clear All Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Get Note Count",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Get Element Count",
        "args": [
          "xpath=//div[contains(@data-testid, 'note-') and .//h3]"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the number of elements matching ``locator``.",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${count} > 0",
          "Delete All Notes",
          "${count}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Add Note",
        "args": [
          "Original Note",
          "Original content"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding note with title: ${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding note with title: Original Note"
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Original Note' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Original content' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.add_note_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='add-note-button']'."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${title_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${content_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Be True",
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${should_wait} = True"
        ]
      },
      {
        "keyword": "Should Be True",
        "args": [
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if the given condition is not true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${should_wait}",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Edit Note",
        "args": [
          "Original Note",
          "Updated Note",
          "Updated content"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Editing note from '${old_title}' to '${new_title}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Editing note from 'Original Note' to 'Updated Note'"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "xpath=//h3[contains(text(), '${old_title}')]/ancestor::div[contains(@data-testid, 'note-')]//button[contains(@data-testid, 'edit-note-button-')]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//h3[contains(text(), 'Original Note')]/ancestor::div[contains(@data-testid, 'note-')]//button[contains(@data-testid, 'edit-note-button-')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${new_title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Updated Note' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${new_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Updated content' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.update_note_button}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='update-note-button']'.",
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-5.png\"><img src=\"selenium-screenshot-5.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${new_title}' != '${EMPTY}'",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${new_title}')]",
          "timeout=10s"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Verify Note Exists",
        "args": [
          "Updated Note",
          "Updated content"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Note Persistence",
        "args": [
          "Updated Note",
          "Updated content"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Note With Special Characters",
    "error_message": "Element with locator 'xpath=//h3[contains(text(), 'Special !@#$%^&*() Note')]/ancestor::div[contains(@data-testid, 'note-')]' not found.",
    "doc": "Test creating a note with special characters",
    "steps": [
      {
        "keyword": "Open Notes App",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.notes_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Notes')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Clear All Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Get Note Count",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Get Element Count",
        "args": [
          "xpath=//div[contains(@data-testid, 'note-') and .//h3]"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the number of elements matching ``locator``.",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${count} > 0",
          "Delete All Notes",
          "${count}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Add Note",
        "args": [
          "Special !@#$%^&*() Note",
          "Content with special characters: !@#$%^&*()"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding note with title: ${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding note with title: Special !@#$%^&*() Note"
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Special !@#$%^&*() Note' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Content with special characters: !@#$%^&*()' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.add_note_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='add-note-button']'."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${title_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${content_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Be True",
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${should_wait} = True"
        ]
      },
      {
        "keyword": "Should Be True",
        "args": [
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if the given condition is not true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${should_wait}",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Verify Note Exists",
        "args": [
          "Special !@#$%^&*() Note",
          "Content with special characters: !@#$%^&*()"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable If",
        "args": [
          "'${title}' == '${EMPTY}'",
          "xpath=//div[contains(@data-testid, 'note-')][.//p[contains(@data-testid, 'note-content-')]]",
          "xpath=//h3[contains(text(), '${title}')]/ancestor::div[contains(@data-testid, 'note-')]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Sets variable based on the given condition.",
        "messages": [
          "${note_selector} = xpath=//h3[contains(text(), 'Special !@#$%^&*() Note')]/ancestor::div[contains(@data-testid, 'note-')]"
        ]
      },
      {
        "keyword": "Element Should Be Visible",
        "args": [
          "${note_selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Verifies that the element identified by ``locator`` is visible.",
        "messages": [
          "Element 'xpath=//h3[contains(text(), 'Special !@#$%^&*() Note')]/ancestor::div[contains(@data-testid, 'note-')]' is displayed."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Be Empty",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Be Empty",
        "args": [
          "${content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Verifies that the given item is not empty.",
        "messages": [
          "Length is 43."
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_content}",
          "Element Should Be Visible",
          "${note_selector}//p[contains(@data-testid, 'note-content-')]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Element Should Be Visible",
        "args": [
          "${note_selector}//p[contains(@data-testid, 'note-content-')]"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Verifies that the element identified by ``locator`` is visible.",
        "messages": [
          "Element 'xpath=//h3[contains(text(), 'Special !@#$%^&*() Note')]/ancestor::div[contains(@data-testid, 'note-')]//p[contains(@data-testid, 'note-content-')]' is displayed."
        ]
      },
      {
        "keyword": "Verify Note Persistence",
        "args": [
          "Special !@#$%^&*() Note",
          "Content with special characters: !@#$%^&*()"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Reload Notes App",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Reload Page",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "Simulates user reloading page.",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.notes_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Notes')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Sleep",
        "args": [
          "1s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Pauses the test executed for the given time.",
        "messages": [
          "Slept 1 second."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Verify Note Exists",
        "args": [
          "${title}",
          "${content}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable If",
        "args": [
          "'${title}' == '${EMPTY}'",
          "xpath=//div[contains(@data-testid, 'note-')][.//p[contains(@data-testid, 'note-content-')]]",
          "xpath=//h3[contains(text(), '${title}')]/ancestor::div[contains(@data-testid, 'note-')]"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Sets variable based on the given condition.",
        "messages": [
          "${note_selector} = xpath=//h3[contains(text(), 'Special !@#$%^&*() Note')]/ancestor::div[contains(@data-testid, 'note-')]"
        ]
      },
      {
        "keyword": "Element Should Be Visible",
        "args": [
          "${note_selector}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "Verifies that the element identified by ``locator`` is visible.",
        "messages": [
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-6.png\"><img src=\"selenium-screenshot-6.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Be Empty",
          "${content}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_content}",
          "Element Should Be Visible",
          "${note_selector}//p[contains(@data-testid, 'note-content-')]"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Long Note Content",
    "error_message": "Element with locator 'xpath=//h3[contains(text(), 'Long Note')]/ancestor::div[contains(@data-testid, 'note-')]' not found.",
    "doc": "Test creating a note with long content",
    "steps": [
      {
        "keyword": "Open Notes App",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.notes_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Notes')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Clear All Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Get Note Count",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Get Element Count",
        "args": [
          "xpath=//div[contains(@data-testid, 'note-') and .//h3]"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the number of elements matching ``locator``.",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${count} > 0",
          "Delete All Notes",
          "${count}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Set Variable",
        "args": [
          "This is a very long note content that spans multiple lines and contains a lot of text. It should be properly saved and displayed in the notes application. The content should be preserved exactly as entered, including all spaces and line breaks."
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "Returns the given values which can then be assigned to a variables.",
        "messages": [
          "${long_content} = This is a very long note content that spans multiple lines and contains a lot of text. It should be properly saved and displayed in the notes application. The content should be preserved exactly as en..."
        ]
      },
      {
        "keyword": "Add Note",
        "args": [
          "Long Note",
          "${long_content}"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding note with title: ${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding note with title: Long Note"
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Long Note' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'This is a very long note content that spans multiple lines and contains a lot of text. It should be properly saved and displayed in the notes application. The content should be preserved exactly as entered, including all spaces and line breaks.' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.add_note_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='add-note-button']'."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${title_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${content_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Be True",
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${should_wait} = True"
        ]
      },
      {
        "keyword": "Should Be True",
        "args": [
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if the given condition is not true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${should_wait}",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Verify Note Exists",
        "args": [
          "Long Note",
          "${long_content}"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable If",
        "args": [
          "'${title}' == '${EMPTY}'",
          "xpath=//div[contains(@data-testid, 'note-')][.//p[contains(@data-testid, 'note-content-')]]",
          "xpath=//h3[contains(text(), '${title}')]/ancestor::div[contains(@data-testid, 'note-')]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Sets variable based on the given condition.",
        "messages": [
          "${note_selector} = xpath=//h3[contains(text(), 'Long Note')]/ancestor::div[contains(@data-testid, 'note-')]"
        ]
      },
      {
        "keyword": "Element Should Be Visible",
        "args": [
          "${note_selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Verifies that the element identified by ``locator`` is visible.",
        "messages": [
          "Element 'xpath=//h3[contains(text(), 'Long Note')]/ancestor::div[contains(@data-testid, 'note-')]' is displayed."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Be Empty",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Be Empty",
        "args": [
          "${content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Verifies that the given item is not empty.",
        "messages": [
          "Length is 244."
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_content}",
          "Element Should Be Visible",
          "${note_selector}//p[contains(@data-testid, 'note-content-')]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Element Should Be Visible",
        "args": [
          "${note_selector}//p[contains(@data-testid, 'note-content-')]"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Verifies that the element identified by ``locator`` is visible.",
        "messages": [
          "Element 'xpath=//h3[contains(text(), 'Long Note')]/ancestor::div[contains(@data-testid, 'note-')]//p[contains(@data-testid, 'note-content-')]' is displayed."
        ]
      },
      {
        "keyword": "Verify Note Persistence",
        "args": [
          "Long Note",
          "${long_content}"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Reload Notes App",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Reload Page",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "Simulates user reloading page.",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.notes_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Notes')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Sleep",
        "args": [
          "1s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Pauses the test executed for the given time.",
        "messages": [
          "Slept 1 second."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Verify Note Exists",
        "args": [
          "${title}",
          "${content}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable If",
        "args": [
          "'${title}' == '${EMPTY}'",
          "xpath=//div[contains(@data-testid, 'note-')][.//p[contains(@data-testid, 'note-content-')]]",
          "xpath=//h3[contains(text(), '${title}')]/ancestor::div[contains(@data-testid, 'note-')]"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Sets variable based on the given condition.",
        "messages": [
          "${note_selector} = xpath=//h3[contains(text(), 'Long Note')]/ancestor::div[contains(@data-testid, 'note-')]"
        ]
      },
      {
        "keyword": "Element Should Be Visible",
        "args": [
          "${note_selector}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "Verifies that the element identified by ``locator`` is visible.",
        "messages": [
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-7.png\"><img src=\"selenium-screenshot-7.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Be Empty",
          "${content}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_content}",
          "Element Should Be Visible",
          "${note_selector}//p[contains(@data-testid, 'note-content-')]"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Note With Line Breaks",
    "error_message": "Element with locator 'xpath=//h3[contains(text(), 'Multi-line Note')]/ancestor::div[contains(@data-testid, 'note-')]' not found.",
    "doc": "Test creating a note with line breaks",
    "steps": [
      {
        "keyword": "Open Notes App",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.notes_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Notes')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Clear All Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Get Note Count",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Get Element Count",
        "args": [
          "xpath=//div[contains(@data-testid, 'note-') and .//h3]"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the number of elements matching ``locator``.",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${count} > 0",
          "Delete All Notes",
          "${count}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Catenate",
        "args": [
          "SEPARATOR=\\n",
          "Line 1",
          "Line 2",
          "Line 3"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "Catenates the given items together and returns the resulted string.",
        "messages": [
          "${content_with_breaks} = Line 1\nLine 2\nLine 3"
        ]
      },
      {
        "keyword": "Add Note",
        "args": [
          "Multi-line Note",
          "${content_with_breaks}"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding note with title: ${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding note with title: Multi-line Note"
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Multi-line Note' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Line 1\nLine 2\nLine 3' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.add_note_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='add-note-button']'."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${title_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${content_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Be True",
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${should_wait} = True"
        ]
      },
      {
        "keyword": "Should Be True",
        "args": [
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if the given condition is not true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${should_wait}",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Verify Note Exists",
        "args": [
          "Multi-line Note",
          "${content_with_breaks}"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable If",
        "args": [
          "'${title}' == '${EMPTY}'",
          "xpath=//div[contains(@data-testid, 'note-')][.//p[contains(@data-testid, 'note-content-')]]",
          "xpath=//h3[contains(text(), '${title}')]/ancestor::div[contains(@data-testid, 'note-')]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Sets variable based on the given condition.",
        "messages": [
          "${note_selector} = xpath=//h3[contains(text(), 'Multi-line Note')]/ancestor::div[contains(@data-testid, 'note-')]"
        ]
      },
      {
        "keyword": "Element Should Be Visible",
        "args": [
          "${note_selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Verifies that the element identified by ``locator`` is visible.",
        "messages": [
          "Element 'xpath=//h3[contains(text(), 'Multi-line Note')]/ancestor::div[contains(@data-testid, 'note-')]' is displayed."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Be Empty",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Be Empty",
        "args": [
          "${content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Verifies that the given item is not empty.",
        "messages": [
          "Length is 20."
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_content}",
          "Element Should Be Visible",
          "${note_selector}//p[contains(@data-testid, 'note-content-')]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Element Should Be Visible",
        "args": [
          "${note_selector}//p[contains(@data-testid, 'note-content-')]"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Verifies that the element identified by ``locator`` is visible.",
        "messages": [
          "Element 'xpath=//h3[contains(text(), 'Multi-line Note')]/ancestor::div[contains(@data-testid, 'note-')]//p[contains(@data-testid, 'note-content-')]' is displayed."
        ]
      },
      {
        "keyword": "Verify Note Persistence",
        "args": [
          "Multi-line Note",
          "${content_with_breaks}"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Reload Notes App",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Reload Page",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "Simulates user reloading page.",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.notes_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Notes')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Sleep",
        "args": [
          "1s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Pauses the test executed for the given time.",
        "messages": [
          "Slept 1 second."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Verify Note Exists",
        "args": [
          "${title}",
          "${content}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable If",
        "args": [
          "'${title}' == '${EMPTY}'",
          "xpath=//div[contains(@data-testid, 'note-')][.//p[contains(@data-testid, 'note-content-')]]",
          "xpath=//h3[contains(text(), '${title}')]/ancestor::div[contains(@data-testid, 'note-')]"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Sets variable based on the given condition.",
        "messages": [
          "${note_selector} = xpath=//h3[contains(text(), 'Multi-line Note')]/ancestor::div[contains(@data-testid, 'note-')]"
        ]
      },
      {
        "keyword": "Element Should Be Visible",
        "args": [
          "${note_selector}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "Verifies that the element identified by ``locator`` is visible.",
        "messages": [
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-8.png\"><img src=\"selenium-screenshot-8.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Be Empty",
          "${content}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_content}",
          "Element Should Be Visible",
          "${note_selector}//p[contains(@data-testid, 'note-content-')]"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Note With Unicode Characters",
    "error_message": "Element with locator 'xpath=//h3[contains(text(), 'Unicode Note')]/ancestor::div[contains(@data-testid, 'note-')]' not found.",
    "doc": "Test creating a note with Unicode characters",
    "steps": [
      {
        "keyword": "Open Notes App",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.notes_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Notes')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Clear All Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Get Note Count",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Get Element Count",
        "args": [
          "xpath=//div[contains(@data-testid, 'note-') and .//h3]"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the number of elements matching ``locator``.",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${count} > 0",
          "Delete All Notes",
          "${count}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Add Note",
        "args": [
          "Unicode Note",
          "This note contains Unicode characters: 你好世界"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding note with title: ${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding note with title: Unicode Note"
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Unicode Note' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'This note contains Unicode characters: 你好世界' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.add_note_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='add-note-button']'."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${title_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${content_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Be True",
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${should_wait} = True"
        ]
      },
      {
        "keyword": "Should Be True",
        "args": [
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if the given condition is not true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${should_wait}",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Verify Note Exists",
        "args": [
          "Unicode Note",
          "This note contains Unicode characters: 你好世界"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable If",
        "args": [
          "'${title}' == '${EMPTY}'",
          "xpath=//div[contains(@data-testid, 'note-')][.//p[contains(@data-testid, 'note-content-')]]",
          "xpath=//h3[contains(text(), '${title}')]/ancestor::div[contains(@data-testid, 'note-')]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Sets variable based on the given condition.",
        "messages": [
          "${note_selector} = xpath=//h3[contains(text(), 'Unicode Note')]/ancestor::div[contains(@data-testid, 'note-')]"
        ]
      },
      {
        "keyword": "Element Should Be Visible",
        "args": [
          "${note_selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Verifies that the element identified by ``locator`` is visible.",
        "messages": [
          "Element 'xpath=//h3[contains(text(), 'Unicode Note')]/ancestor::div[contains(@data-testid, 'note-')]' is displayed."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Be Empty",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Be Empty",
        "args": [
          "${content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Verifies that the given item is not empty.",
        "messages": [
          "Length is 43."
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_content}",
          "Element Should Be Visible",
          "${note_selector}//p[contains(@data-testid, 'note-content-')]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Element Should Be Visible",
        "args": [
          "${note_selector}//p[contains(@data-testid, 'note-content-')]"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Verifies that the element identified by ``locator`` is visible.",
        "messages": [
          "Element 'xpath=//h3[contains(text(), 'Unicode Note')]/ancestor::div[contains(@data-testid, 'note-')]//p[contains(@data-testid, 'note-content-')]' is displayed."
        ]
      },
      {
        "keyword": "Verify Note Persistence",
        "args": [
          "Unicode Note",
          "This note contains Unicode characters: 你好世界"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Reload Notes App",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Reload Page",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "Simulates user reloading page.",
        "messages": []
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.notes_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Notes')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Sleep",
        "args": [
          "1s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Pauses the test executed for the given time.",
        "messages": [
          "Slept 1 second."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Verify Note Exists",
        "args": [
          "${title}",
          "${content}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Set Variable If",
        "args": [
          "'${title}' == '${EMPTY}'",
          "xpath=//div[contains(@data-testid, 'note-')][.//p[contains(@data-testid, 'note-content-')]]",
          "xpath=//h3[contains(text(), '${title}')]/ancestor::div[contains(@data-testid, 'note-')]"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Sets variable based on the given condition.",
        "messages": [
          "${note_selector} = xpath=//h3[contains(text(), 'Unicode Note')]/ancestor::div[contains(@data-testid, 'note-')]"
        ]
      },
      {
        "keyword": "Element Should Be Visible",
        "args": [
          "${note_selector}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "Verifies that the element identified by ``locator`` is visible.",
        "messages": [
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-9.png\"><img src=\"selenium-screenshot-9.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Be Empty",
          "${content}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${has_content}",
          "Element Should Be Visible",
          "${note_selector}//p[contains(@data-testid, 'note-content-')]"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Edit With Empty Fields",
    "error_message": "Element with locator 'css=[data-testid='update-note-button']' not found.",
    "doc": "Test that editing a note with empty fields is not allowed",
    "steps": [
      {
        "keyword": "Open Notes App",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.notes_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Notes')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Clear All Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Get Note Count",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Get Element Count",
        "args": [
          "xpath=//div[contains(@data-testid, 'note-') and .//h3]"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the number of elements matching ``locator``.",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${count} > 0",
          "Delete All Notes",
          "${count}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Add Note",
        "args": [
          "Original Note",
          "Original content"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding note with title: ${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding note with title: Original Note"
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Original Note' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Original content' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.add_note_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='add-note-button']'."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${title_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${content_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Be True",
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${should_wait} = True"
        ]
      },
      {
        "keyword": "Should Be True",
        "args": [
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if the given condition is not true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${should_wait}",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Get Note Count",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": [
          "${initial_count} = 1"
        ]
      },
      {
        "keyword": "Get Element Count",
        "args": [
          "xpath=//div[contains(@data-testid, 'note-') and .//h3]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns the number of elements matching ``locator``.",
        "messages": [
          "${count} = 1"
        ]
      },
      {
        "keyword": "Edit Note",
        "args": [
          "Original Note",
          "${EMPTY}",
          "Updated content"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Editing note from '${old_title}' to '${new_title}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Editing note from 'Original Note' to ''"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "xpath=//h3[contains(text(), '${old_title}')]/ancestor::div[contains(@data-testid, 'note-')]//button[contains(@data-testid, 'edit-note-button-')]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//h3[contains(text(), 'Original Note')]/ancestor::div[contains(@data-testid, 'note-')]//button[contains(@data-testid, 'edit-note-button-')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${new_title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text '' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${new_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Updated content' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.update_note_button}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='update-note-button']'.",
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-10.png\"><img src=\"selenium-screenshot-10.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${new_title}' != '${EMPTY}'",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${new_title}')]",
          "timeout=10s"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Get Note Count",
        "args": [],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Should Be Equal As Numbers",
        "args": [
          "${initial_count}",
          "${final_count}"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "Fails if objects are unequal after converting them to real numbers.",
        "messages": []
      },
      {
        "keyword": "Verify Note Exists",
        "args": [
          "Original Note",
          "Original content"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Multiple Edits",
    "error_message": "Element with locator 'css=[data-testid='update-note-button']' not found.",
    "doc": "Test multiple edits of the same note",
    "steps": [
      {
        "keyword": "Open Notes App",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.notes_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Notes')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Clear All Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Get Note Count",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Get Element Count",
        "args": [
          "xpath=//div[contains(@data-testid, 'note-') and .//h3]"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the number of elements matching ``locator``.",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${count} > 0",
          "Delete All Notes",
          "${count}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Add Note",
        "args": [
          "Test Note",
          "Initial content"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding note with title: ${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding note with title: Test Note"
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Test Note' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Initial content' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.add_note_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='add-note-button']'."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${title_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${content_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Be True",
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${should_wait} = True"
        ]
      },
      {
        "keyword": "Should Be True",
        "args": [
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if the given condition is not true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${should_wait}",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Edit Note",
        "args": [
          "Test Note",
          "Test Note",
          "First edit"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Editing note from '${old_title}' to '${new_title}'"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Editing note from 'Test Note' to 'Test Note'"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "xpath=//h3[contains(text(), '${old_title}')]/ancestor::div[contains(@data-testid, 'note-')]//button[contains(@data-testid, 'edit-note-button-')]"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//h3[contains(text(), 'Test Note')]/ancestor::div[contains(@data-testid, 'note-')]//button[contains(@data-testid, 'edit-note-button-')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${new_title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Test Note' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${new_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'First edit' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.update_note_button}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='update-note-button']'.",
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-11.png\"><img src=\"selenium-screenshot-11.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "'${new_title}' != '${EMPTY}'",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${new_title}')]",
          "timeout=10s"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Verify Note Exists",
        "args": [
          "Test Note",
          "First edit"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Edit Note",
        "args": [
          "Test Note",
          "Test Note",
          "Second edit"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Note Exists",
        "args": [
          "Test Note",
          "Second edit"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Edit Note",
        "args": [
          "Test Note",
          "Test Note",
          "Final edit"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Note Exists",
        "args": [
          "Test Note",
          "Final edit"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Note Persistence",
        "args": [
          "Test Note",
          "Final edit"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Browser Refresh Behavior",
    "error_message": "Element with locator 'xpath=//h3[contains(text(), 'Persistence Test')]/ancestor::div[contains(@data-testid, 'note-')]' not found.",
    "doc": "Test that notes persist after multiple browser refreshes",
    "steps": [
      {
        "keyword": "Open Notes App",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.header.notes_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'xpath=//button[contains(text(), 'Notes')]'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.notes_app}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Clear All Notes",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Get Note Count",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Get Element Count",
        "args": [
          "xpath=//div[contains(@data-testid, 'note-') and .//h3]"
        ],
        "status": "PASS",
        "depth": 3,
        "doc": "Returns the number of elements matching ``locator``.",
        "messages": [
          "${count} = 0"
        ]
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${count} > 0",
          "Delete All Notes",
          "${count}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Add Note",
        "args": [
          "Persistence Test",
          "This note should persist"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding note with title: ${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding note with title: Persistence Test"
        ]
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "${selectors.notes.note_title_input}",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_title_input}",
          "${title}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Persistence Test' into text field 'css=[data-testid='note-title-input']'."
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.notes.note_content_input}",
          "${content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'This note should persist' into text field 'css=[data-testid='note-content-input']'."
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${selectors.notes.add_note_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element 'css=[data-testid='add-note-button']'."
        ]
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${title_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${title}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Not Match Regexp",
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${content_has_content} = True"
        ]
      },
      {
        "keyword": "Should Not Match Regexp",
        "args": [
          "${content}",
          "^\\\\s*$"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "messages": []
      },
      {
        "keyword": "Run Keyword And Return Status",
        "args": [
          "Should Be True",
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "messages": [
          "${should_wait} = True"
        ]
      },
      {
        "keyword": "Should Be True",
        "args": [
          "${title_has_content} and ${content_has_content}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Fails if the given condition is not true.",
        "messages": []
      },
      {
        "keyword": "Run Keyword If",
        "args": [
          "${should_wait}",
          "Wait Until Element Is Visible",
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "messages": []
      },
      {
        "keyword": "Wait Until Element Is Visible",
        "args": [
          "xpath=//h3[contains(text(), '${title}')]",
          "timeout=10s"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until the element ``locator`` is visible.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Test Todo Completion Toggle",
    "error_message": "Checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"65c7a03d0a334dfd96925202c22ede08\", element=\"f.E7F3A6C528C897F16A6A778AEC85EAAB.d.E82248895363B699A14F0C9119D46358.e.6\")>' should have been selected but was not.",
    "doc": "Test toggling todo completion",
    "steps": [
      {
        "keyword": "Open Todo Application",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.todo.todo_input}",
          "${timeouts.page_load}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened todo list application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened todo list application"
        ]
      },
      {
        "keyword": "Add New Todo",
        "args": [
          "Exercise"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Add Todo Item",
        "args": [
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding todo item: Exercise"
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.todo.todo_input}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Exercise' into text field 'css=input[placeholder='Add a new todo']'."
        ]
      },
      {
        "keyword": "Click Button",
        "args": [
          "${selectors.todo.add_todo_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Clicks the button identified by ``locator``.",
        "messages": [
          "Clicking button 'css=button[data-testid='add-todo-button']'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until ``text`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Verify Todo Not Completed",
        "args": [
          "Exercise"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Exercise')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"65c7a03d0a334dfd96925202c22ede08\", element=\"f.E7F3A6C528C897F16A6A778AEC85EAAB.d.E82248895363B699A14F0C9119D46358.e.6\")>"
        ]
      },
      {
        "keyword": "Checkbox Should Not Be Selected",
        "args": [
          "${checkbox}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Verifies checkbox ``locator`` is not selected/checked.",
        "messages": [
          "Verifying checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"65c7a03d0a334dfd96925202c22ede08\", element=\"f.E7F3A6C528C897F16A6A778AEC85EAAB.d.E82248895363B699A14F0C9119D46358.e.6\")>' is not selected."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Verified todo item is not completed: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Verified todo item is not completed: Exercise"
        ]
      },
      {
        "keyword": "Toggle Todo",
        "args": [
          "Exercise"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Exercise')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"65c7a03d0a334dfd96925202c22ede08\", element=\"f.E7F3A6C528C897F16A6A778AEC85EAAB.d.E82248895363B699A14F0C9119D46358.e.6\")>"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${checkbox}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element '<selenium.webdriver.remote.webelement.WebElement (session=\"65c7a03d0a334dfd96925202c22ede08\", element=\"f.E7F3A6C528C897F16A6A778AEC85EAAB.d.E82248895363B699A14F0C9119D46358.e.6\")>'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Toggled todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Toggled todo item: Exercise"
        ]
      },
      {
        "keyword": "Verify Todo Completed",
        "args": [
          "Exercise"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Exercise')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"65c7a03d0a334dfd96925202c22ede08\", element=\"f.E7F3A6C528C897F16A6A778AEC85EAAB.d.E82248895363B699A14F0C9119D46358.e.6\")>"
        ]
      },
      {
        "keyword": "Checkbox Should Be Selected",
        "args": [
          "${checkbox}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "Verifies checkbox ``locator`` is selected/checked.",
        "messages": [
          "Verifying checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"65c7a03d0a334dfd96925202c22ede08\", element=\"f.E7F3A6C528C897F16A6A778AEC85EAAB.d.E82248895363B699A14F0C9119D46358.e.6\")>' is selected.",
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-13.png\"><img src=\"selenium-screenshot-13.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Verified todo item is completed: ${todo_text}"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Toggle Todo",
        "args": [
          "Exercise"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Todo Not Completed",
        "args": [
          "Exercise"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Todo Application",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser and Stop App",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "Closes the current browser.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Closed browser and stopped application"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Closed browser and stopped application"
        ]
      }
    ]
  },
  {
    "test_name": "Test Multiple Operations",
    "error_message": "Checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"25d74c6434c464dd02f90db3bfdb14db\", element=\"f.52F05614EDCF0C2E4623960FD92A3E7A.d.9C85331C367F417A44C11381FE44609E.e.6\")>' should have been selected but was not.",
    "doc": "Test multiple operations",
    "steps": [
      {
        "keyword": "Open Todo Application",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.todo.todo_input}",
          "${timeouts.page_load}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened todo list application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened todo list application"
        ]
      },
      {
        "keyword": "Add New Todo",
        "args": [
          "Read book"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Add Todo Item",
        "args": [
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding todo item: Read book"
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.todo.todo_input}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Read book' into text field 'css=input[placeholder='Add a new todo']'."
        ]
      },
      {
        "keyword": "Click Button",
        "args": [
          "${selectors.todo.add_todo_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Clicks the button identified by ``locator``.",
        "messages": [
          "Clicking button 'css=button[data-testid='add-todo-button']'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until ``text`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Add New Todo",
        "args": [
          "Write code"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Add Todo Item",
        "args": [
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding todo item: Write code"
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.todo.todo_input}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Write code' into text field 'css=input[placeholder='Add a new todo']'."
        ]
      },
      {
        "keyword": "Click Button",
        "args": [
          "${selectors.todo.add_todo_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Clicks the button identified by ``locator``.",
        "messages": [
          "Clicking button 'css=button[data-testid='add-todo-button']'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until ``text`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Toggle Todo",
        "args": [
          "Read book"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Read book')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"25d74c6434c464dd02f90db3bfdb14db\", element=\"f.52F05614EDCF0C2E4623960FD92A3E7A.d.9C85331C367F417A44C11381FE44609E.e.6\")>"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${checkbox}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element '<selenium.webdriver.remote.webelement.WebElement (session=\"25d74c6434c464dd02f90db3bfdb14db\", element=\"f.52F05614EDCF0C2E4623960FD92A3E7A.d.9C85331C367F417A44C11381FE44609E.e.6\")>'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Toggled todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Toggled todo item: Read book"
        ]
      },
      {
        "keyword": "Verify Todo Completed",
        "args": [
          "Read book"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Read book')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"25d74c6434c464dd02f90db3bfdb14db\", element=\"f.52F05614EDCF0C2E4623960FD92A3E7A.d.9C85331C367F417A44C11381FE44609E.e.6\")>"
        ]
      },
      {
        "keyword": "Checkbox Should Be Selected",
        "args": [
          "${checkbox}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "Verifies checkbox ``locator`` is selected/checked.",
        "messages": [
          "Verifying checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"25d74c6434c464dd02f90db3bfdb14db\", element=\"f.52F05614EDCF0C2E4623960FD92A3E7A.d.9C85331C367F417A44C11381FE44609E.e.6\")>' is selected.",
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-14.png\"><img src=\"selenium-screenshot-14.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Verified todo item is completed: ${todo_text}"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Add New Todo",
        "args": [
          "Send email"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Delete Todo",
        "args": [
          "Write code"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Todo Does Not Exist",
        "args": [
          "Write code"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Toggle Todo",
        "args": [
          "Send email"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Todo Completed",
        "args": [
          "Send email"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Todo Application",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser and Stop App",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "Closes the current browser.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Closed browser and stopped application"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Closed browser and stopped application"
        ]
      }
    ]
  },
  {
    "test_name": "Test Complex Workflow",
    "error_message": "Checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"d62e93ad3990c4194c813d1227d5e37b\", element=\"f.F8CE28BBCDB510386925EEDC12BFC901.d.4DF0F5543D4351C8913F35E96990A49E.e.6\")>' should have been selected but was not.",
    "doc": "Test complex workflow",
    "steps": [
      {
        "keyword": "Open Todo Application",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.todo.todo_input}",
          "${timeouts.page_load}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened todo list application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened todo list application"
        ]
      },
      {
        "keyword": "Add New Todo",
        "args": [
          "Meeting prep"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Add Todo Item",
        "args": [
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding todo item: Meeting prep"
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.todo.todo_input}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Meeting prep' into text field 'css=input[placeholder='Add a new todo']'."
        ]
      },
      {
        "keyword": "Click Button",
        "args": [
          "${selectors.todo.add_todo_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Clicks the button identified by ``locator``.",
        "messages": [
          "Clicking button 'css=button[data-testid='add-todo-button']'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until ``text`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Add New Todo",
        "args": [
          "Client call"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Add Todo Item",
        "args": [
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding todo item: Client call"
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.todo.todo_input}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Client call' into text field 'css=input[placeholder='Add a new todo']'."
        ]
      },
      {
        "keyword": "Click Button",
        "args": [
          "${selectors.todo.add_todo_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Clicks the button identified by ``locator``.",
        "messages": [
          "Clicking button 'css=button[data-testid='add-todo-button']'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until ``text`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Add New Todo",
        "args": [
          "Report writing"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Add Todo Item",
        "args": [
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding todo item: Report writing"
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.todo.todo_input}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Report writing' into text field 'css=input[placeholder='Add a new todo']'."
        ]
      },
      {
        "keyword": "Click Button",
        "args": [
          "${selectors.todo.add_todo_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Clicks the button identified by ``locator``.",
        "messages": [
          "Clicking button 'css=button[data-testid='add-todo-button']'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until ``text`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Toggle Todo",
        "args": [
          "Meeting prep"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Meeting prep')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"d62e93ad3990c4194c813d1227d5e37b\", element=\"f.F8CE28BBCDB510386925EEDC12BFC901.d.4DF0F5543D4351C8913F35E96990A49E.e.6\")>"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${checkbox}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element '<selenium.webdriver.remote.webelement.WebElement (session=\"d62e93ad3990c4194c813d1227d5e37b\", element=\"f.F8CE28BBCDB510386925EEDC12BFC901.d.4DF0F5543D4351C8913F35E96990A49E.e.6\")>'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Toggled todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Toggled todo item: Meeting prep"
        ]
      },
      {
        "keyword": "Add New Todo",
        "args": [
          "Team sync"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Add Todo Item",
        "args": [
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding todo item: Team sync"
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.todo.todo_input}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Team sync' into text field 'css=input[placeholder='Add a new todo']'."
        ]
      },
      {
        "keyword": "Click Button",
        "args": [
          "${selectors.todo.add_todo_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Clicks the button identified by ``locator``.",
        "messages": [
          "Clicking button 'css=button[data-testid='add-todo-button']'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until ``text`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Delete Todo",
        "args": [
          "Client call"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Delete Todo Item",
        "args": [
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Deleting todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Deleting todo item: Client call"
        ]
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_delete_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Client call')]]//button[@data-testid[starts-with(., 'todo-delete-')]]"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${delete_button} = <selenium.webdriver.remote.webelement.WebElement (session=\"d62e93ad3990c4194c813d1227d5e37b\", element=\"f.F8CE28BBCDB510386925EEDC12BFC901.d.4DF0F5543D4351C8913F35E96990A49E.e.30\")>"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${delete_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element '<selenium.webdriver.remote.webelement.WebElement (session=\"d62e93ad3990c4194c813d1227d5e37b\", element=\"f.F8CE28BBCDB510386925EEDC12BFC901.d.4DF0F5543D4351C8913F35E96990A49E.e.30\")>'."
        ]
      },
      {
        "keyword": "Wait Until Page Does Not Contain",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until ``text`` disappears from the current page.",
        "messages": []
      },
      {
        "keyword": "Toggle Todo",
        "args": [
          "Report writing"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Report writing')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"d62e93ad3990c4194c813d1227d5e37b\", element=\"f.F8CE28BBCDB510386925EEDC12BFC901.d.4DF0F5543D4351C8913F35E96990A49E.e.22\")>"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${checkbox}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element '<selenium.webdriver.remote.webelement.WebElement (session=\"d62e93ad3990c4194c813d1227d5e37b\", element=\"f.F8CE28BBCDB510386925EEDC12BFC901.d.4DF0F5543D4351C8913F35E96990A49E.e.22\")>'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Toggled todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Toggled todo item: Report writing"
        ]
      },
      {
        "keyword": "Add New Todo",
        "args": [
          "Code review"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Add Todo Item",
        "args": [
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding todo item: Code review"
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.todo.todo_input}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Code review' into text field 'css=input[placeholder='Add a new todo']'."
        ]
      },
      {
        "keyword": "Click Button",
        "args": [
          "${selectors.todo.add_todo_button}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Clicks the button identified by ``locator``.",
        "messages": [
          "Clicking button 'css=button[data-testid='add-todo-button']'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Waits until ``text`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Verify Todo Completed",
        "args": [
          "Meeting prep"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Meeting prep')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"d62e93ad3990c4194c813d1227d5e37b\", element=\"f.F8CE28BBCDB510386925EEDC12BFC901.d.4DF0F5543D4351C8913F35E96990A49E.e.6\")>"
        ]
      },
      {
        "keyword": "Checkbox Should Be Selected",
        "args": [
          "${checkbox}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "Verifies checkbox ``locator`` is selected/checked.",
        "messages": [
          "Verifying checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"d62e93ad3990c4194c813d1227d5e37b\", element=\"f.F8CE28BBCDB510386925EEDC12BFC901.d.4DF0F5543D4351C8913F35E96990A49E.e.6\")>' is selected.",
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-15.png\"><img src=\"selenium-screenshot-15.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Verified todo item is completed: ${todo_text}"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Verify Todo Completed",
        "args": [
          "Report writing"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Delete Todo",
        "args": [
          "Team sync"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Toggle Todo",
        "args": [
          "Code review"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Todo Does Not Exist",
        "args": [
          "Client call"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Todo Does Not Exist",
        "args": [
          "Team sync"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Todo Application",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser and Stop App",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "Closes the current browser.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Closed browser and stopped application"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Closed browser and stopped application"
        ]
      }
    ]
  },
  {
    "test_name": "Complete Todo",
    "error_message": "Checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"ad9cc60732f59d9674608fd71d190d17\", element=\"f.989F01181E34103E953DDD375EC5CA93.d.59AC9AAC343CA23A3760157FF2FC4AAB.e.6\")>' should have been selected but was not.",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Todo Application",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.todo.todo_input}",
          "${timeouts.page_load}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened todo list application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened todo list application"
        ]
      },
      {
        "keyword": "Add Todo Item",
        "args": [
          "Complete this task"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding todo item: Complete this task"
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.todo.todo_input}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Complete this task' into text field 'css=input[placeholder='Add a new todo']'."
        ]
      },
      {
        "keyword": "Click Button",
        "args": [
          "${selectors.todo.add_todo_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Clicks the button identified by ``locator``.",
        "messages": [
          "Clicking button 'css=button[data-testid='add-todo-button']'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until ``text`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Verify Todo Item Is Not Completed",
        "args": [
          "Complete this task"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Todo Not Completed",
        "args": [
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Complete this task')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"ad9cc60732f59d9674608fd71d190d17\", element=\"f.989F01181E34103E953DDD375EC5CA93.d.59AC9AAC343CA23A3760157FF2FC4AAB.e.6\")>"
        ]
      },
      {
        "keyword": "Checkbox Should Not Be Selected",
        "args": [
          "${checkbox}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Verifies checkbox ``locator`` is not selected/checked.",
        "messages": [
          "Verifying checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"ad9cc60732f59d9674608fd71d190d17\", element=\"f.989F01181E34103E953DDD375EC5CA93.d.59AC9AAC343CA23A3760157FF2FC4AAB.e.6\")>' is not selected."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Verified todo item is not completed: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Verified todo item is not completed: Complete this task"
        ]
      },
      {
        "keyword": "Toggle Todo Item",
        "args": [
          "Complete this task"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Toggle Todo",
        "args": [
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Complete this task')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"ad9cc60732f59d9674608fd71d190d17\", element=\"f.989F01181E34103E953DDD375EC5CA93.d.59AC9AAC343CA23A3760157FF2FC4AAB.e.6\")>"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${checkbox}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element '<selenium.webdriver.remote.webelement.WebElement (session=\"ad9cc60732f59d9674608fd71d190d17\", element=\"f.989F01181E34103E953DDD375EC5CA93.d.59AC9AAC343CA23A3760157FF2FC4AAB.e.6\")>'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Toggled todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Toggled todo item: Complete this task"
        ]
      },
      {
        "keyword": "Verify Todo Item Is Completed",
        "args": [
          "Complete this task"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Todo Completed",
        "args": [
          "${todo_text}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Complete this task')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"ad9cc60732f59d9674608fd71d190d17\", element=\"f.989F01181E34103E953DDD375EC5CA93.d.59AC9AAC343CA23A3760157FF2FC4AAB.e.6\")>"
        ]
      },
      {
        "keyword": "Checkbox Should Be Selected",
        "args": [
          "${checkbox}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "Verifies checkbox ``locator`` is selected/checked.",
        "messages": [
          "Verifying checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"ad9cc60732f59d9674608fd71d190d17\", element=\"f.989F01181E34103E953DDD375EC5CA93.d.59AC9AAC343CA23A3760157FF2FC4AAB.e.6\")>' is selected.",
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-16.png\"><img src=\"selenium-screenshot-16.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Verified todo item is completed: ${todo_text}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Toggle Multiple Todos",
    "error_message": "Checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"5a0f9bb1ef42418b31a15caec09888fa\", element=\"f.6D63D3A022C4ECE2A968A73E5B2CDF83.d.CFA127145E401B20E58B78BE573238E1.e.6\")>' should have been selected but was not.",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Todo Application",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.todo.todo_input}",
          "${timeouts.page_load}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened todo list application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened todo list application"
        ]
      },
      {
        "keyword": "Add Todo Item",
        "args": [
          "Task 1"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding todo item: Task 1"
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.todo.todo_input}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Task 1' into text field 'css=input[placeholder='Add a new todo']'."
        ]
      },
      {
        "keyword": "Click Button",
        "args": [
          "${selectors.todo.add_todo_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Clicks the button identified by ``locator``.",
        "messages": [
          "Clicking button 'css=button[data-testid='add-todo-button']'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until ``text`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Add Todo Item",
        "args": [
          "Task 2"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding todo item: Task 2"
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.todo.todo_input}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Task 2' into text field 'css=input[placeholder='Add a new todo']'."
        ]
      },
      {
        "keyword": "Click Button",
        "args": [
          "${selectors.todo.add_todo_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Clicks the button identified by ``locator``.",
        "messages": [
          "Clicking button 'css=button[data-testid='add-todo-button']'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until ``text`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Toggle Todo Item",
        "args": [
          "Task 1"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Toggle Todo",
        "args": [
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Task 1')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"5a0f9bb1ef42418b31a15caec09888fa\", element=\"f.6D63D3A022C4ECE2A968A73E5B2CDF83.d.CFA127145E401B20E58B78BE573238E1.e.6\")>"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${checkbox}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element '<selenium.webdriver.remote.webelement.WebElement (session=\"5a0f9bb1ef42418b31a15caec09888fa\", element=\"f.6D63D3A022C4ECE2A968A73E5B2CDF83.d.CFA127145E401B20E58B78BE573238E1.e.6\")>'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Toggled todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Toggled todo item: Task 1"
        ]
      },
      {
        "keyword": "Toggle Todo Item",
        "args": [
          "Task 2"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Toggle Todo",
        "args": [
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Task 2')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"5a0f9bb1ef42418b31a15caec09888fa\", element=\"f.6D63D3A022C4ECE2A968A73E5B2CDF83.d.CFA127145E401B20E58B78BE573238E1.e.18\")>"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${checkbox}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element '<selenium.webdriver.remote.webelement.WebElement (session=\"5a0f9bb1ef42418b31a15caec09888fa\", element=\"f.6D63D3A022C4ECE2A968A73E5B2CDF83.d.CFA127145E401B20E58B78BE573238E1.e.18\")>'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Toggled todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Toggled todo item: Task 2"
        ]
      },
      {
        "keyword": "Verify Todo Item Is Completed",
        "args": [
          "Task 1"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Todo Completed",
        "args": [
          "${todo_text}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Task 1')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"5a0f9bb1ef42418b31a15caec09888fa\", element=\"f.6D63D3A022C4ECE2A968A73E5B2CDF83.d.CFA127145E401B20E58B78BE573238E1.e.6\")>"
        ]
      },
      {
        "keyword": "Checkbox Should Be Selected",
        "args": [
          "${checkbox}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "Verifies checkbox ``locator`` is selected/checked.",
        "messages": [
          "Verifying checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"5a0f9bb1ef42418b31a15caec09888fa\", element=\"f.6D63D3A022C4ECE2A968A73E5B2CDF83.d.CFA127145E401B20E58B78BE573238E1.e.6\")>' is selected.",
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-17.png\"><img src=\"selenium-screenshot-17.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Verified todo item is completed: ${todo_text}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Verify Todo Item Is Completed",
        "args": [
          "Task 2"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Complete And Uncomplete Todo",
    "error_message": "Checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"f7711731aaf67ce0d14b24ddf7bf2715\", element=\"f.954927998D1B53EAF3905C6BBA9A63E6.d.D0F3DF73C705F6AF624CEB884B87F954.e.6\")>' should have been selected but was not.",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Todo Application",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.todo.todo_input}",
          "${timeouts.page_load}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened todo list application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened todo list application"
        ]
      },
      {
        "keyword": "Add Todo Item",
        "args": [
          "Toggle task"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding todo item: Toggle task"
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.todo.todo_input}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Toggle task' into text field 'css=input[placeholder='Add a new todo']'."
        ]
      },
      {
        "keyword": "Click Button",
        "args": [
          "${selectors.todo.add_todo_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Clicks the button identified by ``locator``.",
        "messages": [
          "Clicking button 'css=button[data-testid='add-todo-button']'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until ``text`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Toggle Todo Item",
        "args": [
          "Toggle task"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Toggle Todo",
        "args": [
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Toggle task')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"f7711731aaf67ce0d14b24ddf7bf2715\", element=\"f.954927998D1B53EAF3905C6BBA9A63E6.d.D0F3DF73C705F6AF624CEB884B87F954.e.6\")>"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${checkbox}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element '<selenium.webdriver.remote.webelement.WebElement (session=\"f7711731aaf67ce0d14b24ddf7bf2715\", element=\"f.954927998D1B53EAF3905C6BBA9A63E6.d.D0F3DF73C705F6AF624CEB884B87F954.e.6\")>'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Toggled todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Toggled todo item: Toggle task"
        ]
      },
      {
        "keyword": "Verify Todo Item Is Completed",
        "args": [
          "Toggle task"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Todo Completed",
        "args": [
          "${todo_text}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Toggle task')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"f7711731aaf67ce0d14b24ddf7bf2715\", element=\"f.954927998D1B53EAF3905C6BBA9A63E6.d.D0F3DF73C705F6AF624CEB884B87F954.e.6\")>"
        ]
      },
      {
        "keyword": "Checkbox Should Be Selected",
        "args": [
          "${checkbox}"
        ],
        "status": "FAIL",
        "depth": 2,
        "doc": "Verifies checkbox ``locator`` is selected/checked.",
        "messages": [
          "Verifying checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"f7711731aaf67ce0d14b24ddf7bf2715\", element=\"f.954927998D1B53EAF3905C6BBA9A63E6.d.D0F3DF73C705F6AF624CEB884B87F954.e.6\")>' is selected.",
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-18.png\"><img src=\"selenium-screenshot-18.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Verified todo item is completed: ${todo_text}"
        ],
        "status": "NOT RUN",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Toggle Todo Item",
        "args": [
          "Toggle task"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Verify Todo Item Is Not Completed",
        "args": [
          "Toggle task"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "Closes the current browser.",
        "messages": []
      }
    ]
  },
  {
    "test_name": "Complete Todo Item",
    "error_message": "Checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"98853a453c2d47df77fd9fb240f4340e\", element=\"f.3AA37B48A032CA3CB0AD8D2F242301D8.d.2DD3C1BF3841F1A26CE679EBFB2ECAB5.e.6\")>' should have been selected but was not.",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Todo Application",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.todo.todo_input}",
          "${timeouts.page_load}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened todo list application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened todo list application"
        ]
      },
      {
        "keyword": "Add Todo Item",
        "args": [
          "${test_data.todo_items}[1]"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding todo item: Do laundry"
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.todo.todo_input}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Do laundry' into text field 'css=input[placeholder='Add a new todo']'."
        ]
      },
      {
        "keyword": "Click Button",
        "args": [
          "${selectors.todo.add_todo_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Clicks the button identified by ``locator``.",
        "messages": [
          "Clicking button 'css=button[data-testid='add-todo-button']'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until ``text`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Complete Todo Item",
        "args": [
          "${test_data.todo_items}[1]"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Completing todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Completing todo item: Do laundry"
        ]
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Do laundry')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"98853a453c2d47df77fd9fb240f4340e\", element=\"f.3AA37B48A032CA3CB0AD8D2F242301D8.d.2DD3C1BF3841F1A26CE679EBFB2ECAB5.e.6\")>"
        ]
      },
      {
        "keyword": "Select Checkbox",
        "args": [
          "${checkbox}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Selects the checkbox identified by ``locator``.",
        "messages": [
          "Selecting checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"98853a453c2d47df77fd9fb240f4340e\", element=\"f.3AA37B48A032CA3CB0AD8D2F242301D8.d.2DD3C1BF3841F1A26CE679EBFB2ECAB5.e.6\")>'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Enabled",
        "args": [
          "${checkbox}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is enabled.",
        "messages": []
      },
      {
        "keyword": "Verify Todo Completed",
        "args": [
          "${test_data.todo_items}[1]"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Do laundry')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"98853a453c2d47df77fd9fb240f4340e\", element=\"f.3AA37B48A032CA3CB0AD8D2F242301D8.d.2DD3C1BF3841F1A26CE679EBFB2ECAB5.e.6\")>"
        ]
      },
      {
        "keyword": "Checkbox Should Be Selected",
        "args": [
          "${checkbox}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "Verifies checkbox ``locator`` is selected/checked.",
        "messages": [
          "Verifying checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"98853a453c2d47df77fd9fb240f4340e\", element=\"f.3AA37B48A032CA3CB0AD8D2F242301D8.d.2DD3C1BF3841F1A26CE679EBFB2ECAB5.e.6\")>' is selected.",
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-19.png\"><img src=\"selenium-screenshot-19.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Verified todo item is completed: ${todo_text}"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Close Browser and Stop App",
        "args": [],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Todo Application",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser and Stop App",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "Closes the current browser.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Closed browser and stopped application"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Closed browser and stopped application"
        ]
      }
    ]
  },
  {
    "test_name": "Multiple Todo Operations",
    "error_message": "Checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"edf9a7900e52bf9210ad4484c48a729c\", element=\"f.B78DE7FE90E962B33D783E6FD5972A41.d.E084F9609C01CE086732B146B1D451B8.e.18\")>' should have been selected but was not.",
    "doc": "",
    "steps": [
      {
        "keyword": "Open Todo Application",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Open Browser",
        "args": [
          "${app.url}",
          "chrome"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Opens a new browser instance to the optional ``url``.",
        "messages": [
          "Opening browser 'chrome' to base url 'http://localhost:3000'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains Element",
        "args": [
          "${selectors.todo.todo_input}",
          "${timeouts.page_load}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Opened todo list application"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Opened todo list application"
        ]
      },
      {
        "keyword": "Add Todo Item",
        "args": [
          "${test_data.todo_items}[0]"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding todo item: Buy groceries"
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.todo.todo_input}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Buy groceries' into text field 'css=input[placeholder='Add a new todo']'."
        ]
      },
      {
        "keyword": "Click Button",
        "args": [
          "${selectors.todo.add_todo_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Clicks the button identified by ``locator``.",
        "messages": [
          "Clicking button 'css=button[data-testid='add-todo-button']'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until ``text`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Add Todo Item",
        "args": [
          "${test_data.todo_items}[1]"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding todo item: Do laundry"
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.todo.todo_input}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Do laundry' into text field 'css=input[placeholder='Add a new todo']'."
        ]
      },
      {
        "keyword": "Click Button",
        "args": [
          "${selectors.todo.add_todo_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Clicks the button identified by ``locator``.",
        "messages": [
          "Clicking button 'css=button[data-testid='add-todo-button']'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until ``text`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Add Todo Item",
        "args": [
          "${test_data.todo_items}[2]"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Adding todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Adding todo item: Call mom"
        ]
      },
      {
        "keyword": "Input Text",
        "args": [
          "${selectors.todo.todo_input}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Types the given ``text`` into the text field identified by ``locator``.",
        "messages": [
          "Typing text 'Call mom' into text field 'css=input[placeholder='Add a new todo']'."
        ]
      },
      {
        "keyword": "Click Button",
        "args": [
          "${selectors.todo.add_todo_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Clicks the button identified by ``locator``.",
        "messages": [
          "Clicking button 'css=button[data-testid='add-todo-button']'."
        ]
      },
      {
        "keyword": "Wait Until Page Contains",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until ``text`` appears on the current page.",
        "messages": []
      },
      {
        "keyword": "Complete Todo Item",
        "args": [
          "${test_data.todo_items}[1]"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Completing todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Completing todo item: Do laundry"
        ]
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Do laundry')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"edf9a7900e52bf9210ad4484c48a729c\", element=\"f.B78DE7FE90E962B33D783E6FD5972A41.d.E084F9609C01CE086732B146B1D451B8.e.18\")>"
        ]
      },
      {
        "keyword": "Select Checkbox",
        "args": [
          "${checkbox}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Selects the checkbox identified by ``locator``.",
        "messages": [
          "Selecting checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"edf9a7900e52bf9210ad4484c48a729c\", element=\"f.B78DE7FE90E962B33D783E6FD5972A41.d.E084F9609C01CE086732B146B1D451B8.e.18\")>'."
        ]
      },
      {
        "keyword": "Wait Until Element Is Enabled",
        "args": [
          "${checkbox}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until the element ``locator`` is enabled.",
        "messages": []
      },
      {
        "keyword": "Delete Todo Item",
        "args": [
          "${test_data.todo_items}[0]"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Deleting todo item: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Deleting todo item: Buy groceries"
        ]
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_delete_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Buy groceries')]]//button[@data-testid[starts-with(., 'todo-delete-')]]"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${delete_button} = <selenium.webdriver.remote.webelement.WebElement (session=\"edf9a7900e52bf9210ad4484c48a729c\", element=\"f.B78DE7FE90E962B33D783E6FD5972A41.d.E084F9609C01CE086732B146B1D451B8.e.26\")>"
        ]
      },
      {
        "keyword": "Click Element",
        "args": [
          "${delete_button}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Click the element identified by ``locator``.",
        "messages": [
          "Clicking element '<selenium.webdriver.remote.webelement.WebElement (session=\"edf9a7900e52bf9210ad4484c48a729c\", element=\"f.B78DE7FE90E962B33D783E6FD5972A41.d.E084F9609C01CE086732B146B1D451B8.e.26\")>'."
        ]
      },
      {
        "keyword": "Wait Until Page Does Not Contain",
        "args": [
          "${todo_text}",
          "${timeouts.element_visible}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Waits until ``text`` disappears from the current page.",
        "messages": []
      },
      {
        "keyword": "Verify Todo Exists",
        "args": [
          "${test_data.todo_items}[1]"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Page Should Contain",
        "args": [
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Verifies that current page contains ``text``.",
        "messages": [
          "Current page contains text 'Do laundry'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Verified todo item exists: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Verified todo item exists: Do laundry"
        ]
      },
      {
        "keyword": "Verify Todo Exists",
        "args": [
          "${test_data.todo_items}[2]"
        ],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Page Should Contain",
        "args": [
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Verifies that current page contains ``text``.",
        "messages": [
          "Current page contains text 'Call mom'."
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Verified todo item exists: ${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Verified todo item exists: Call mom"
        ]
      },
      {
        "keyword": "Verify Todo Completed",
        "args": [
          "${test_data.todo_items}[1]"
        ],
        "status": "FAIL",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Replace String",
        "args": [
          "${selectors.todo.todo_checkbox_for_text}",
          "{0}",
          "${todo_text}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Replaces ``search_for`` in the given ``string`` with ``replace_with``.",
        "messages": [
          "${selector} = xpath=//li[.//span[contains(text(), 'Do laundry')]]//input[@type='checkbox']"
        ]
      },
      {
        "keyword": "Get WebElement",
        "args": [
          "${selector}"
        ],
        "status": "PASS",
        "depth": 1,
        "doc": "Returns the first WebElement matching the given ``locator``.",
        "messages": [
          "${checkbox} = <selenium.webdriver.remote.webelement.WebElement (session=\"edf9a7900e52bf9210ad4484c48a729c\", element=\"f.B78DE7FE90E962B33D783E6FD5972A41.d.E084F9609C01CE086732B146B1D451B8.e.18\")>"
        ]
      },
      {
        "keyword": "Checkbox Should Be Selected",
        "args": [
          "${checkbox}"
        ],
        "status": "FAIL",
        "depth": 1,
        "doc": "Verifies checkbox ``locator`` is selected/checked.",
        "messages": [
          "Verifying checkbox '<selenium.webdriver.remote.webelement.WebElement (session=\"edf9a7900e52bf9210ad4484c48a729c\", element=\"f.B78DE7FE90E962B33D783E6FD5972A41.d.E084F9609C01CE086732B146B1D451B8.e.18\")>' is selected.",
          "</td></tr><tr><td colspan=\"3\"><a href=\"selenium-screenshot-20.png\"><img src=\"selenium-screenshot-20.png\" width=\"800px\"></a>"
        ]
      },
      {
        "keyword": "Log",
        "args": [
          "Verified todo item is completed: ${todo_text}"
        ],
        "status": "NOT RUN",
        "depth": 1,
        "doc": "Logs the given message with the given level.",
        "messages": []
      },
      {
        "keyword": "Verify Todo Not Exists",
        "args": [
          "${test_data.todo_items}[0]"
        ],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser and Stop App",
        "args": [],
        "status": "NOT RUN",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Todo Application",
        "args": [],
        "status": "PASS",
        "depth": 0,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser and Stop App",
        "args": [],
        "status": "PASS",
        "depth": 1,
        "doc": "",
        "messages": []
      },
      {
        "keyword": "Close Browser",
        "args": [],
        "status": "PASS",
        "depth": 2,
        "doc": "Closes the current browser.",
        "messages": []
      },
      {
        "keyword": "Log",
        "args": [
          "Closed browser and stopped application"
        ],
        "status": "PASS",
        "depth": 2,
        "doc": "Logs the given message with the given level.",
        "messages": [
          "Closed browser and stopped application"
        ]
      }
    ]
  }
]